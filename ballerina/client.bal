// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;
import ballerina/mime;

# The Zoom Meeting APIs allow developers to interface with Zoom Meetings and Webinars programmatically.
public isolated client class Client {
    final http:Client clientEp;
    final readonly & ApiKeysConfig? apiKeyConfig;

    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api.zoom.us/v2") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        if config.auth is ApiKeysConfig {
            self.apiKeyConfig = (<ApiKeysConfig>config.auth).cloneReadOnly();
        } else {
            httpClientConfig.auth = <http:BearerTokenConfig|http:OAuth2RefreshTokenGrantConfig>config.auth;
            self.apiKeyConfig = ();
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Delete device
    #
    # + deviceId - Unique identifier of the device.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204` **No Content** Device deleted successfully. 
    resource isolated function delete devices/[string deviceId](map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/devices/${getEncodedUri(deviceId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete ZPA device by vendor and mac address
    #
    # + vendor - The device's manufacturer.
    # + macAddress - The device's mac address.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204` **No Content** Device deleted successfully. 
    resource isolated function delete devices/zpa/vendors/[string vendor]/mac_addresses/[string macAddress](map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/devices/zpa/vendors/${getEncodedUri(vendor)}/mac_addresses/${getEncodedUri(macAddress)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a H.323/SIP device
    #
    # + deviceId - The device ID.
    # + headers - Headers to be sent with the request 
    # + return - You do not have the permission to delete this device. 
    resource isolated function delete h323/devices/[string deviceId](map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/h323/devices/${getEncodedUri(deviceId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a live meeting message
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, store it as a long-format integer and **not** an integer. Meeting IDs can be more than 10 digits.
    # + messageId - The live meeting chat message's unique identifier (UUID), in base64-encoded format.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `204`    Meeting chat message deleted. 
    resource isolated function delete live_meetings/[int meetingId]/chat/messages/[string messageId](map<string|string[]> headers = {}, *DeleteMeetingChatMessageByIdQueries queries) returns http:Response|error {
        string resourcePath = string `/live_meetings/${getEncodedUri(meetingId)}/chat/messages/${getEncodedUri(messageId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a live webinar message
    #
    # + webinarId - The webinar's ID.
    # + messageId - The live webinar chat message's unique identifier (UUID), in base64-encoded format.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `204`    Webinar chat message deleted. 
    resource isolated function delete live_webinars/[int webinarId]/chat/messages/[string messageId](map<string|string[]> headers = {}, *DeleteWebinarChatMessageByIdQueries queries) returns http:Response|error {
        string resourcePath = string `/live_webinars/${getEncodedUri(webinarId)}/chat/messages/${getEncodedUri(messageId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a meeting
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code**: `204`    Meeting deleted. 
    resource isolated function delete meetings/[int meetingId](map<string|string[]> headers = {}, *MeetingDeleteQueries queries) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a meeting app
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `201` App deleted. 
    resource isolated function delete meetings/[int meetingId]/open_apps(map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/open_apps`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a meeting poll
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + pollId - The poll ID
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`    Meeting Poll deleted 
    resource isolated function delete meetings/[int meetingId]/polls/[string pollId](map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/polls/${getEncodedUri(pollId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a meeting registrant
    #
    # + meetingId - The meeting ID.
    # + registrantId - The meeting registrant ID.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP status code:** `204`    OK 
    resource isolated function delete meetings/[int meetingId]/registrants/[string registrantId](map<string|string[]> headers = {}, *MeetingregistrantdeleteQueries queries) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/registrants/${getEncodedUri(registrantId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a meeting survey
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`     Meeting survey deleted. 
    resource isolated function delete meetings/[int meetingId]/survey(map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/survey`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete meeting or webinar recordings
    #
    # + meetingId - To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance. 
    # To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request. 
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Recordings deleted.  **Error Code:** `200`    You do not have the right permission. 
    resource isolated function delete meetings/[string meetingId]/recordings(map<string|string[]> headers = {}, *RecordingDeleteQueries queries) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/recordings`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a recording file for a meeting or webinar
    #
    # + meetingId - To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance. 
    # To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request. 
    # + recordingId - The recording ID.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Recording deleted.  **Error Code:** `200`   You do not have the right permissions. 
    resource isolated function delete meetings/[string meetingId]/recordings/[string recordingId](map<string|string[]> headers = {}, *RecordingDeleteOneQueries queries) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/recordings/${getEncodedUri(recordingId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a meeting's archived files
    #
    # + meetingUUID - The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.
    # If the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`     Meeting archived file deleted. 
    resource isolated function delete past_meetings/[string meetingUUID]/archive_files(map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/past_meetings/${getEncodedUri(meetingUUID)}/archive_files`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete SIP phone
    #
    # + phoneId - The SIP phone ID. It can be retrieved from the List SIP phones API.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`   SIP phone deleted. 
    resource isolated function delete sip_phones/[string phoneId](map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/sip_phones/${getEncodedUri(phoneId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a tracking field
    #
    # + fieldId - The tracking field ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`   Tracking Field deleted 
    resource isolated function delete tracking_fields/[string fieldId](map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/tracking_fields/${getEncodedUri(fieldId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a user's TSP account
    #
    # + userId - The user ID or email address of the user. For user-level apps, pass the `me` value.
    # + tspId - TSP account ID.
    # + headers - Headers to be sent with the request 
    # + return - **Status Code:** `204` **No Content**   TSP account deleted. 
    resource isolated function delete users/[UserId4 userId]/tsp/["1"|"2" tspId](map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/tsp/${getEncodedUri(tspId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a webinar
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `204` <br>  Webinar deleted. 
    resource isolated function delete webinars/[int webinarId](map<string|string[]> headers = {}, *WebinarDeleteQueries queries) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a webinar's branding name tag
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `204`    * No content.  * Name tag(s) deleted. 
    resource isolated function delete webinars/[int webinarId]/branding/name_tags(map<string|string[]> headers = {}, *DeleteWebinarBrandingNameTagQueries queries) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/branding/name_tags`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a webinar's branding virtual backgrounds
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `204`    * No content.  * Virtual background file(s) deleted. 
    resource isolated function delete webinars/[int webinarId]/branding/virtual_backgrounds(map<string|string[]> headers = {}, *DeleteWebinarBrandingVBQueries queries) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/branding/virtual_backgrounds`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a webinar's branding wallpaper
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`    * No content.  * Webinar wallpaper deleted. 
    resource isolated function delete webinars/[int webinarId]/branding/wallpaper(map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/branding/wallpaper`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Remove all panelists
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`   Panelists removed. 
    resource isolated function delete webinars/[int webinarId]/panelists(map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/panelists`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Remove a panelist
    #
    # + webinarId - The webinar's ID.
    # + panelistId - The panelist's ID or email.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`   Panelist removed. 
    resource isolated function delete webinars/[int webinarId]/panelists/[string panelistId](map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/panelists/${getEncodedUri(panelistId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a webinar poll
    #
    # + webinarId - The webinar's ID.
    # + pollId - The poll ID
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`   Webinar Poll deleted 
    resource isolated function delete webinars/[int webinarId]/polls/[string pollId](map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/polls/${getEncodedUri(pollId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a webinar registrant
    #
    # + webinarId - The webinar ID.
    # + registrantId - The registrant ID.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP status code:** `204`    OK 
    resource isolated function delete webinars/[int webinarId]/registrants/[string registrantId](map<string|string[]> headers = {}, *DeleteWebinarRegistrantQueries queries) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/registrants/${getEncodedUri(registrantId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete a webinar survey
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`     Webinar survey deleted. 
    resource isolated function delete webinars/[int webinarId]/survey(map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/survey`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # List archived files
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`     Archived files returned. 
    resource isolated function get archive_files(map<string|string[]> headers = {}, *ListArchivedFilesQueries queries) returns InlineResponse200|error {
        string resourcePath = string `/archive_files`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get archived file statistics
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`     The statistics of Archived files returned. 
    resource isolated function get archive_files/statistics(map<string|string[]> headers = {}, *GetArchivedFileStatisticsQueries queries) returns InlineResponse2001|error {
        string resourcePath = string `/archive_files/statistics`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List devices
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**   Device detail returned successfully. 
    resource isolated function get devices(map<string|string[]> headers = {}, *ListDevicesQueries queries) returns InlineResponse2007|error {
        string resourcePath = string `/devices`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get device detail
    #
    # + deviceId - The device's unique identifier.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**  Device detail returned successfully. 
    resource isolated function get devices/[string deviceId](map<string|string[]> headers = {}) returns InlineResponse20010|error {
        string resourcePath = string `/devices/${getEncodedUri(deviceId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get ZDM group info
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**  Version detail returned successfully. 
    resource isolated function get devices/groups(map<string|string[]> headers = {}, *GetzdmgroupinfoQueries queries) returns InlineResponse2008|error {
        string resourcePath = string `/devices/groups`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get ZPA version info
    #
    # + zdmGroupId - The Zoom Device Management (ZDM) group ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**  Version detail returned successfully. 
    resource isolated function get devices/zpa/zdm_groups/[string zdmGroupId]/versions(map<string|string[]> headers = {}) returns InlineResponse2009|error {
        string resourcePath = string `/devices/zpa/zdm_groups/${getEncodedUri(zdmGroupId)}/versions`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List H.323/SIP devices
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   List of H.323/SIP devices returned.   **Error Code:** `200`   No permission. 
    resource isolated function get h323/devices(map<string|string[]> headers = {}, *DeviceListQueries queries) returns H323SIPDeviceList|error {
        string resourcePath = string `/h323/devices`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a meeting
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be more than 10 digits.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Meeting object returned. 
    resource isolated function get meetings/[int meetingId](map<string|string[]> headers = {}, *MeetingQueries queries) returns InlineResponse20012|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get meeting invitation
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Meeting invitation returned. 
    resource isolated function get meetings/[int meetingId]/invitation(map<string|string[]> headers = {}) returns MeetingInvitation|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/invitation`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a meeting's join token for live streaming
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Meeting live streaming token returned. 
    resource isolated function get meetings/[int meetingId]/jointoken/live_streaming(map<string|string[]> headers = {}) returns InlineResponse20013|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/jointoken/live_streaming`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a meeting's archive token for local archiving
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Meeting local archiving token returned. 
    resource isolated function get meetings/[int meetingId]/jointoken/local_archiving(map<string|string[]> headers = {}) returns InlineResponse20014|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/jointoken/local_archiving`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a meeting's join token for local recording
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Meeting local recording token returned. 
    resource isolated function get meetings/[int meetingId]/jointoken/local_recording(map<string|string[]> headers = {}, *MeetingLocalRecordingJoinTokenQueries queries) returns InlineResponse20015|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/jointoken/local_recording`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List meeting polls
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:**    List polls of a Meeting  returned 
    resource isolated function get meetings/[int meetingId]/polls(map<string|string[]> headers = {}, *MeetingPollsQueries queries) returns PollList|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/polls`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a meeting poll
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + pollId - The poll ID
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Meeting Poll object returned 
    resource isolated function get meetings/[int meetingId]/polls/[string pollId](map<string|string[]> headers = {}) returns InlineResponse20017|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/polls/${getEncodedUri(pollId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List recording registrants
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`     Registrants returned. 
    resource isolated function get meetings/[int meetingId]/recordings/registrants(map<string|string[]> headers = {}, *MeetingRecordingRegistrantsQueries queries) returns MeetingCloudRecordingRegistration|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/recordings/registrants`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List meeting registrants
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Successfully listed meeting registrants. 
    resource isolated function get meetings/[int meetingId]/registrants(map<string|string[]> headers = {}, *MeetingRegistrantsQueries queries) returns RegistrationList|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/registrants`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a meeting registrant
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + registrantId - The registrant ID.
    # + headers - Headers to be sent with the request 
    # + return - Success. 
    resource isolated function get meetings/[int meetingId]/registrants/[string registrantId](map<string|string[]> headers = {}) returns MeetingRegistrant|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/registrants/${getEncodedUri(registrantId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List registration questions 
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Meeting Registrant Question object returned 
    resource isolated function get meetings/[int meetingId]/registrants/questions(map<string|string[]> headers = {}) returns InlineResponse20018|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/registrants/questions`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a meeting survey
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be more than 10 digits.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`     Meeting survey object returned. 
    resource isolated function get meetings/[int meetingId]/survey(map<string|string[]> headers = {}) returns MeetingSurveyObject|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/survey`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get meeting's token
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Meeting token returned. 
    resource isolated function get meetings/[int meetingId]/token(map<string|string[]> headers = {}, *MeetingTokenQueries queries) returns InlineResponse20020|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/token`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get livestream details
    #
    # + meetingId - Unique identifier of the meeting.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**   Live Stream details returned. 
    resource isolated function get meetings/[string meetingId]/livestream(map<string|string[]> headers = {}) returns InlineResponse20016|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/livestream`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a meeting summary
    #
    # + meetingId - The meeting's universally unique ID (UUID). When you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`Meeting Poll object returned. 
    resource isolated function get meetings/[string meetingId]/meeting_summary(map<string|string[]> headers = {}) returns InlineResponse20051|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/meeting_summary`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get meeting recordings
    #
    # + meetingId - To get a meeting's cloud recordings, provide the meeting ID or UUID. If providing the meeting ID instead of UUID, the response will be for the latest meeting instance. 
    # To get a webinar's cloud recordings, provide the webinar's ID or UUID. If providing the webinar ID instead of UUID, the response will be for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//` (example: `/ajXp112QmuoKj4854875==`), **[double encode](/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the UUID** before making an API request. 
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Recording object returned.  **Error Code:** `200`    You do not have the right permissions. 
    resource isolated function get meetings/[string meetingId]/recordings(map<string|string[]> headers = {}, *RecordingGetQueries queries) returns InlineResponse2003|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/recordings`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a meeting or webinar recording's analytics details
    #
    # + meetingId - To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance. 
    # To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request. 
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Analytics Detail listed successfully. 
    resource isolated function get meetings/[string meetingId]/recordings/analytics_details(map<string|string[]> headers = {}, *AnalyticsDetailsQueries queries) returns InlineResponse2004|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/recordings/analytics_details`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a meeting or webinar recording's analytics summary
    #
    # + meetingId - To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance. 
    # To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request. 
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Analytics Summary listed successfully. 
    resource isolated function get meetings/[string meetingId]/recordings/analytics_summary(map<string|string[]> headers = {}, *AnalyticsSummaryQueries queries) returns InlineResponse2005|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/recordings/analytics_summary`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get registration questions
    #
    # + meetingId - To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance. 
    # To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request. 
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Recording registrant question object returned. 
    resource isolated function get meetings/[string meetingId]/recordings/registrants/questions(map<string|string[]> headers = {}) returns RecordingRegistrantQuestions|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/recordings/registrants/questions`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get meeting recording settings
    #
    # + meetingId - The meeting ID lets you get cloud recording of a meeting or webinar.
    # * Meeting - Provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response is for the latest meeting instance. 
    # * Webinar - Provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response is for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//` (example: `/ajXp112QmuoKj4854875==`), you must **double encode** the UUID before making an API request. 
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Meeting recording settings returned. 
    resource isolated function get meetings/[string meetingId]/recordings/settings(map<string|string[]> headers = {}) returns RecordingSettings|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/recordings/settings`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List meeting summaries of an account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200` Successfully listed meeting summaries of an account. 
    resource isolated function get meetings/meeting_summaries(map<string|string[]> headers = {}, *ListmeetingsummariesQueries queries) returns InlineResponse20011|error {
        string resourcePath = string `/meetings/meeting_summaries`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get past meeting details
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Meeting information returned. 
    resource isolated function get past_meetings/[MeetingId meetingId](map<string|string[]> headers = {}) returns InlineResponse20021|error {
        string resourcePath = string `/past_meetings/${getEncodedUri(meetingId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List past meeting instances
    #
    # + meetingId - The past meeting's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`     List of ended meeting instances returned. 
    resource isolated function get past_meetings/[int meetingId]/instances(map<string|string[]> headers = {}) returns MeetingInstances|error {
        string resourcePath = string `/past_meetings/${getEncodedUri(meetingId)}/instances`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get past meeting participants
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Meeting participants' report returned. 
    resource isolated function get past_meetings/[string meetingId]/participants(map<string|string[]> headers = {}, *PastMeetingParticipantsQueries queries) returns InlineResponse20022|error {
        string resourcePath = string `/past_meetings/${getEncodedUri(meetingId)}/participants`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List past meeting's poll results
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**   Polls returned successfully. 
    resource isolated function get past_meetings/[string meetingId]/polls(map<string|string[]> headers = {}) returns InlineResponse20023|error {
        string resourcePath = string `/past_meetings/${getEncodedUri(meetingId)}/polls`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List past meetings' Q&A
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**   Q&amp;A returned successfully. 
    resource isolated function get past_meetings/[string meetingId]/qa(map<string|string[]> headers = {}) returns InlineResponse20024|error {
        string resourcePath = string `/past_meetings/${getEncodedUri(meetingId)}/qa`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a meeting's archived files
    #
    # + meetingUUID - The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. After a meeting ends, a new UUID is generated for the next meeting instance.
    # If the meeting UUID begins with a `/` character or contains a `//` character, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID when using the meeting UUID for other API calls.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`     Meeting archived files returned. 
    resource isolated function get past_meetings/[string meetingUUID]/archive_files(map<string|string[]> headers = {}) returns InlineResponse2002|error {
        string resourcePath = string `/past_meetings/${getEncodedUri(meetingUUID)}/archive_files`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List past webinar instances
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   List of past webinar instances returned. 
    resource isolated function get past_webinars/[int webinarId]/instances(map<string|string[]> headers = {}) returns WebinarInstances|error {
        string resourcePath = string `/past_webinars/${getEncodedUri(webinarId)}/instances`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get webinar absentees
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API will return a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Success.    **Error Code:** `200`   Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}. 
    resource isolated function get past_webinars/[string webinarId]/absentees(map<string|string[]> headers = {}, *WebinarAbsenteesQueries queries) returns RegistrationList1|error {
        string resourcePath = string `/past_webinars/${getEncodedUri(webinarId)}/absentees`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List webinar participants
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API returns a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**   Participants list returned. 
    resource isolated function get past_webinars/[string webinarId]/participants(map<string|string[]> headers = {}, *ListWebinarParticipantsQueries queries) returns InlineResponse20056|error {
        string resourcePath = string `/past_webinars/${getEncodedUri(webinarId)}/participants`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List past webinar poll results
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API returns a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**   Polls returned successfully. 
    resource isolated function get past_webinars/[string webinarId]/polls(map<string|string[]> headers = {}) returns InlineResponse20057|error {
        string resourcePath = string `/past_webinars/${getEncodedUri(webinarId)}/polls`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List Q&As of a past webinar
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API returns a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**   Q&amp;A returned successfully. 
    resource isolated function get past_webinars/[string webinarId]/qa(map<string|string[]> headers = {}) returns InlineResponse20058|error {
        string resourcePath = string `/past_webinars/${getEncodedUri(webinarId)}/qa`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get sign In / sign out activity report
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Success 
    resource isolated function get report/activities(map<string|string[]> headers = {}, *ReportSignInSignOutActivitiesQueries queries) returns InlineResponse20029|error {
        string resourcePath = string `/report/activities`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get billing reports
    #
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**   Billing report returned. 
    resource isolated function get report/billing(map<string|string[]> headers = {}) returns InlineResponse20030|error {
        string resourcePath = string `/report/billing`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get billing invoice reports
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**   Billing Invoice reports returned. 
    resource isolated function get report/billing/invoices(map<string|string[]> headers = {}, *GetBillingInvoicesReportsQueries queries) returns InlineResponse20031|error {
        string resourcePath = string `/report/billing/invoices`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get cloud recording usage report
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Cloud Recording Report Returned 
    resource isolated function get report/cloud_recording(map<string|string[]> headers = {}, *ReportCloudRecordingQueries queries) returns InlineResponse20032|error {
        string resourcePath = string `/report/cloud_recording`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get daily usage report
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Daily report retrieved.   This is only available for paid accounts:{accountId}. 
    resource isolated function get report/daily(map<string|string[]> headers = {}, *ReportDailyQueries queries) returns InlineResponse20033|error {
        string resourcePath = string `/report/daily`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a meeting activities report
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`  Success. Only available for Paid or ZMP account {accountId}. 
    resource isolated function get report/meeting_activities(map<string|string[]> headers = {}, *ReportMeetingactivitylogsQueries queries) returns InlineResponse20034|error {
        string resourcePath = string `/report/meeting_activities`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get meeting detail reports
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Meeting details returned.   This is only available for paid account. 
    resource isolated function get report/meetings/[MeetingId1 meetingId](map<string|string[]> headers = {}) returns InlineResponse20035|error {
        string resourcePath = string `/report/meetings/${getEncodedUri(meetingId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get meeting poll reports
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`  * Meeting polls report returned.  * This is only available for paid account: {accountId} 
    resource isolated function get report/meetings/[MeetingId2 meetingId]/polls(map<string|string[]> headers = {}) returns InlineResponse20037|error {
        string resourcePath = string `/report/meetings/${getEncodedUri(meetingId)}/polls`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get meeting participant reports
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Meeting participants report returned.   Only available for Paid or ZMP account: {accountId}. 
    resource isolated function get report/meetings/[string meetingId]/participants(map<string|string[]> headers = {}, *ReportMeetingParticipantsQueries queries) returns InlineResponse20036|error {
        string resourcePath = string `/report/meetings/${getEncodedUri(meetingId)}/participants`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get meeting Q&A report
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Meeting Q&amp;A report returned.   Only available for Paid or ZMP account: {accountId}. 
    resource isolated function get report/meetings/[string meetingId]/qa(map<string|string[]> headers = {}) returns InlineResponse20038|error {
        string resourcePath = string `/report/meetings/${getEncodedUri(meetingId)}/qa`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get meeting survey report
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Meeting survey report returned.    Only available for Paid or ZMP account: {accountId}. 
    resource isolated function get report/meetings/[string meetingId]/survey(map<string|string[]> headers = {}) returns InlineResponse20039|error {
        string resourcePath = string `/report/meetings/${getEncodedUri(meetingId)}/survey`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get operation logs report
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Operation Logs Report Returned 
    resource isolated function get report/operationlogs(map<string|string[]> headers = {}, *ReportOperationLogsQueries queries) returns InlineResponse20040|error {
        string resourcePath = string `/report/operationlogs`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get telephone reports
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Telephone report returned.   This is only available for paid account:{accountId}.   The requested report cannot be generated for this account because this account has not subscribed to toll-free audio conference plan.   Toll Report feature must be enabled to perform this action. Contact the Zoom Support team for help. 
    resource isolated function get report/telephone(map<string|string[]> headers = {}, *ReportTelephoneQueries queries) returns InlineResponse20041|error {
        string resourcePath = string `/report/telephone`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get upcoming events report
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Upcoming events report returned.   
    resource isolated function get report/upcoming_events(map<string|string[]> headers = {}, *ReportUpcomingEventsQueries queries) returns InlineResponse20042|error {
        string resourcePath = string `/report/upcoming_events`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get active or inactive host reports
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Active or inactive hosts report returned.   Only available for Paid or ZMP account: {accountId}. 
    resource isolated function get report/users(map<string|string[]> headers = {}, *ReportUsersQueries queries) returns InlineResponse20043|error {
        string resourcePath = string `/report/users`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get meeting reports
    #
    # + userId - The user ID or email address of the user. For user-level apps, pass the `me` value.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Active or inactive hosts report returned.   
    resource isolated function get report/users/[UserId userId]/meetings(map<string|string[]> headers = {}, *ReportMeetingsQueries queries) returns InlineResponse20044|error {
        string resourcePath = string `/report/users/${getEncodedUri(userId)}/meetings`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get webinar detail reports
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API will return a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Webinar details returned.   This is only available for paid account:{accountId}. 
    resource isolated function get report/webinars/[string webinarId](map<string|string[]> headers = {}) returns InlineResponse20045|error {
        string resourcePath = string `/report/webinars/${getEncodedUri(webinarId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get webinar participant reports
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API will return a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`  * Meeting participants report returned.   Only available for Paid or ZMP account: {accountId}. 
    resource isolated function get report/webinars/[string webinarId]/participants(map<string|string[]> headers = {}, *ReportWebinarParticipantsQueries queries) returns InlineResponse20046|error {
        string resourcePath = string `/report/webinars/${getEncodedUri(webinarId)}/participants`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get webinar poll reports
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API will return a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Webinar polls report returned.   Missing webinar subscription plan.   Only available for Paid or ZMP account: {accountId}. 
    resource isolated function get report/webinars/[string webinarId]/polls(map<string|string[]> headers = {}) returns InlineResponse20047|error {
        string resourcePath = string `/report/webinars/${getEncodedUri(webinarId)}/polls`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get webinar Q&A report
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API will return a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Webinar Q&A report returned. Only available for Paid or ZMP account: {accountId}.   A report can't be generated for this account because this account is not subscribed to a webinar plan. 
    resource isolated function get report/webinars/[string webinarId]/qa(map<string|string[]> headers = {}) returns InlineResponse20048|error {
        string resourcePath = string `/report/webinars/${getEncodedUri(webinarId)}/qa`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get webinar survey report
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API returns a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Webinar survey report returned.   Missing webinar subscription plan.   Only available for Paid or ZMP account: {accountId}. 
    resource isolated function get report/webinars/[string webinarId]/survey(map<string|string[]> headers = {}) returns InlineResponse20049|error {
        string resourcePath = string `/report/webinars/${getEncodedUri(webinarId)}/survey`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List SIP phones
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   SIP Phones listed successfully. **Error Code:** `200`   Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first. 
    resource isolated function get sip_phones(map<string|string[]> headers = {}, *ListSipPhonesQueries queries) returns InlineResponse20050|error {
        string resourcePath = string `/sip_phones`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List tracking fields
    #
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   List of Tracking Fields returned. 
    resource isolated function get tracking_fields(map<string|string[]> headers = {}) returns InlineResponse20054|error {
        string resourcePath = string `/tracking_fields`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a tracking field
    #
    # + fieldId - The tracking field ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Tracking field object returned 
    resource isolated function get tracking_fields/[string fieldId](map<string|string[]> headers = {}) returns InlineResponse20055|error {
        string resourcePath = string `/tracking_fields/${getEncodedUri(fieldId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get account's TSP information
    #
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   TSP account detail returned successfully. 
    resource isolated function get tsp(map<string|string[]> headers = {}) returns InlineResponse20052|error {
        string resourcePath = string `/tsp`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List user's TSP accounts
    #
    # + userId - The user ID or email address of the user. For user-level apps, pass the `me` value.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**   TSP account list returned successfully. 
    resource isolated function get users/[UserId1 userId]/tsp(map<string|string[]> headers = {}) returns InlineResponse20053|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/tsp`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a user's TSP account
    #
    # + userId - The user ID or email address of the user. For user-level apps, pass the `me` value.
    # + tspId - TSP account ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   TSP account retrieved successfully. 
    resource isolated function get users/[UserId3 userId]/tsp/["1"|"2" tspId](map<string|string[]> headers = {}) returns TSPAccount|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/tsp/${getEncodedUri(tspId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List meeting templates
    #
    # + userId - The user ID retrievable from the [List users](/api-reference/zoom-api/methods#operation/users) API.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**    
    resource isolated function get users/[string userId]/meeting_templates(map<string|string[]> headers = {}) returns InlineResponse20025|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/meeting_templates`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List meetings
    #
    # + userId - The user's user ID or email address. For user-level apps, pass the `me` value.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   List of meeting objects returned. 
    resource isolated function get users/[string userId]/meetings(map<string|string[]> headers = {}, *MeetingsQueries queries) returns InlineResponse20026|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/meetings`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List a user's PAC accounts
    #
    # + userId - The user's user ID or email address. For user-level apps, pass the `me` value.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`     PAC account list returned. 
    resource isolated function get users/[string userId]/pac(map<string|string[]> headers = {}) returns InlineResponse20028|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/pac`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List all recordings
    #
    # + userId - The user's ID or email address. For user-level apps, pass the `me` value.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   List of recording objects returned. 
    resource isolated function get users/[string userId]/recordings(map<string|string[]> headers = {}, *RecordingsListQueries queries) returns InlineResponse2006|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/recordings`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List upcoming meetings
    #
    # + userId - The user's user ID or email address. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword).
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200` List of upcoming meeting objects returned. 
    resource isolated function get users/[string userId]/upcoming_meetings(map<string|string[]> headers = {}) returns InlineResponse20027|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/upcoming_meetings`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List webinar templates
    #
    # + userId - The user's ID. To get a user's ID, use the [**List users**](/docs/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**  List of existing templates returned. 
    resource isolated function get users/[string userId]/webinar_templates(map<string|string[]> headers = {}) returns InlineResponse20059|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/webinar_templates`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List webinars
    #
    # + userId - The user's user ID or email address. For user-level apps, pass the `me` value.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   List of webinar objects returned. 
    resource isolated function get users/[string userId]/webinars(map<string|string[]> headers = {}, *WebinarsQueries queries) returns InlineResponse20060|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/webinars`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get webinar's session branding
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Webinar session branding returned. 
    resource isolated function get webinars/[int webinarId]/branding(map<string|string[]> headers = {}) returns InlineResponse20062|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/branding`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a webinar's join token for live streaming
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Webinar live streaming token returned. 
    resource isolated function get webinars/[int webinarId]/jointoken/live_streaming(map<string|string[]> headers = {}) returns InlineResponse20063|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/jointoken/live_streaming`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a webinar's archive token for local archiving
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Webinar local archiving token returned. 
    resource isolated function get webinars/[int webinarId]/jointoken/local_archiving(map<string|string[]> headers = {}) returns InlineResponse20064|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/jointoken/local_archiving`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a webinar's join token for local recording
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Webinar local recording token returned. 
    resource isolated function get webinars/[int webinarId]/jointoken/local_recording(map<string|string[]> headers = {}) returns InlineResponse20065|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/jointoken/local_recording`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List panelists
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Webinar plan subscription missing. Enable webinar for this user once the subscription is added. 
    resource isolated function get webinars/[int webinarId]/panelists(map<string|string[]> headers = {}) returns InlineResponse20067|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/panelists`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List a webinar's polls 
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   List polls of a Webinar  returned 
    resource isolated function get webinars/[int webinarId]/polls(map<string|string[]> headers = {}, *WebinarPollsQueries queries) returns PollList1|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/polls`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a webinar poll
    #
    # + webinarId - The webinar's ID.
    # + pollId - The poll ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Webinar Poll object returned 
    resource isolated function get webinars/[int webinarId]/polls/[string pollId](map<string|string[]> headers = {}) returns InlineResponse20068|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/polls/${getEncodedUri(pollId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List webinar registrants
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}. 
    resource isolated function get webinars/[int webinarId]/registrants(map<string|string[]> headers = {}, *WebinarRegistrantsQueries queries) returns RegistrationList2|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/registrants`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a webinar registrant
    #
    # + webinarId - The webinar's ID.
    # + registrantId - The registrant ID.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success. 
    resource isolated function get webinars/[int webinarId]/registrants/[string registrantId](map<string|string[]> headers = {}, *WebinarRegistrantGetQueries queries) returns WebinarRegistrant|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/registrants/${getEncodedUri(registrantId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List registration questions
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Webinar registrant question object returned. 
    resource isolated function get webinars/[int webinarId]/registrants/questions(map<string|string[]> headers = {}) returns InlineResponse20069|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/registrants/questions`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a webinar survey
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`     Webinar survey object returned. 
    resource isolated function get webinars/[int webinarId]/survey(map<string|string[]> headers = {}) returns WebinarSurveyObject|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/survey`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get webinar's token
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Webinar token returned. 
    resource isolated function get webinars/[int webinarId]/token(map<string|string[]> headers = {}, *WebinarTokenQueries queries) returns InlineResponse20070|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/token`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get webinar tracking sources
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200` 
    resource isolated function get webinars/[int webinarId]/tracking_sources(map<string|string[]> headers = {}) returns InlineResponse20071|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/tracking_sources`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get a webinar
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID).
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `200`   Success 
    resource isolated function get webinars/[string webinarId](map<string|string[]> headers = {}, *WebinarQueries queries) returns InlineResponse20061|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get live stream details
    #
    # + webinarId - The webinar's unique ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**   Live stream details returned. 
    resource isolated function get webinars/[string webinarId]/livestream(map<string|string[]> headers = {}) returns InlineResponse20066|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/livestream`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Update an archived file's auto-delete status
    #
    # + fileId - Archived file ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204` <br>  auto-delete status updated   
    resource isolated function patch archive_files/[string fileId](ArchiveFilesfileIdBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/archive_files/${getEncodedUri(fileId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Change device 
    #
    # + deviceId - Unique identifier of the device.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204` **No Content**  Request processed successfully. 
    resource isolated function patch devices/[string deviceId](DevicesdeviceIdBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/devices/${getEncodedUri(deviceId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Change device association
    #
    # + deviceId - The device's unique identifier.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204` **No Content**   Request processed successfully. 
    resource isolated function patch devices/[string deviceId]/assignment(DeviceIdAssignmentBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/devices/${getEncodedUri(deviceId)}/assignment`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update a H.323/SIP device
    #
    # + deviceId - The device ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`   H.323/SIP device updated. 
    resource isolated function patch h323/devices/[string deviceId](TheH323SIPDeviceObject1 payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/h323/devices/${getEncodedUri(deviceId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update a live meeting message
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, store it as a long-format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + messageId - The live meeting chat message's unique identifier (UUID), in base64-encoded format.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204` <br>  Meeting chat message updated. 
    resource isolated function patch live_meetings/[int meetingId]/chat/messages/[string messageId](MessagesmessageIdBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/live_meetings/${getEncodedUri(meetingId)}/chat/messages/${getEncodedUri(messageId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Use in-meeting controls
    #
    # + meetingId - The live meeting's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status:** `202` **Accepted** Request processed successfully. 
    resource isolated function patch live_meetings/[string meetingId]/events(MeetingIdEventsBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/live_meetings/${getEncodedUri(meetingId)}/events`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update a meeting
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be greater than 10 digits.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Meeting 
    # + return - **HTTP Status Code:** `204`   Meeting updated. 
    resource isolated function patch meetings/[int meetingId](MeetingsmeetingIdBody payload, map<string|string[]> headers = {}, *MeetingUpdateQueries queries) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update a livestream
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + payload - Meeting 
    # + return - **HTTP Status Code:** `204`   Meeting livestream updated. 
    resource isolated function patch meetings/[int meetingId]/livestream(MeetingIdLivestreamBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/livestream`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update livestream status
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + payload - Meeting 
    # + return - **HTTP Status Code:** `204` <br> Meeting livestream updated. 
    resource isolated function patch meetings/[int meetingId]/livestream/status(LivestreamStatusBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/livestream/status`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update registration questions
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + payload - Meeting Registrant Questions 
    # + return - **HTTP Status Code:** `204`   Meeting Registrant Questions Updated 
    resource isolated function patch meetings/[int meetingId]/registrants/questions(RegistrantsQuestionsBody1 payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/registrants/questions`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update a meeting survey
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be over 10 digits.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`     Meeting survey updated. 
    resource isolated function patch meetings/[int meetingId]/survey(MeetingSurveyObject1 payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/survey`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update registration questions
    #
    # + meetingId - To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance. 
    # To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request. 
    # + headers - Headers to be sent with the request 
    # + payload - Recording registrant questions. 
    # + return - **HTTP Status Code:** `200`   Recording registrant questions updated 
    resource isolated function patch meetings/[string meetingId]/recordings/registrants/questions(RegistrantsQuestionsBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/recordings/registrants/questions`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update meeting recording settings
    #
    # + meetingId - To get cloud recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response is for the latest meeting instance. 
    # To get cloud recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response is for the latest webinar instance. 
    # If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **double encode** the UUID before making an API request. 
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`    Meeting recording setting's updated. 
    resource isolated function patch meetings/[string meetingId]/recordings/settings(RecordingSettings1 payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/recordings/settings`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update SIP phone
    #
    # + phoneId - The SIP phone ID. This can be retrieved from the List SIP phones API.
    # + headers - Headers to be sent with the request 
    # + return - **Status Code:** `204` SIP phone updated. 
    resource isolated function patch sip_phones/[string phoneId](SipPhonesphoneIdBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/sip_phones/${getEncodedUri(phoneId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update a tracking field
    #
    # + fieldId - The tracking field ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`   Tracking field updated 
    resource isolated function patch tracking_fields/[string fieldId](TrackingField1 payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/tracking_fields/${getEncodedUri(fieldId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update account's TSP information
    #
    # + headers - Headers to be sent with the request 
    # + payload - TSP Account 
    # + return - **HTTP Status Code:** `204` **No Content**   TSP Account updated. 
    resource isolated function patch tsp(TspBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/tsp`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update a TSP account
    #
    # + userId - The user ID or email address of the user. For user-level apps, pass the `me` value.
    # + tspId - TSP account ID.
    # + headers - Headers to be sent with the request 
    # + payload - TSP account. 
    # + return - **HTTP Status Code:**`204` **No Content**   TSP account updated. 
    resource isolated function patch users/[UserId5 userId]/tsp/["1"|"2" tspId](TSPAccount1 payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/tsp/${getEncodedUri(tspId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Set global dial-in URL for a TSP user
    #
    # + userId - The userId or email address of the user.
    # + headers - Headers to be sent with the request 
    # + payload - Global dial-in URL of the user. 
    # + return - **Status Code:** `204` **No Content**    URL set successfully. 
    resource isolated function patch users/[string userId]/tsp/settings(TSPGlobalDialInURLSetting payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/tsp/settings`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update a webinar
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - Webinar. 
    # + return - **HTTP Status Code:** `204`   Webinar updated. 
    resource isolated function patch webinars/[int webinarId](WebinarswebinarIdBody payload, map<string|string[]> headers = {}, *WebinarUpdateQueries queries) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update a webinar's branding name tag
    #
    # + webinarId - The webinar's ID.
    # + nameTagId - The name tag's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`    * No content.  * Name tag updated. 
    resource isolated function patch webinars/[int webinarId]/branding/name_tags/[string nameTagId](NameTagsnameTagIdBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/branding/name_tags/${getEncodedUri(nameTagId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Set webinar's default branding virtual background
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `204`    * No content. * Virtual background updated. 
    resource isolated function patch webinars/[int webinarId]/branding/virtual_backgrounds(map<string|string[]> headers = {}, *SetWebinarBrandingVBQueries queries) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/branding/virtual_backgrounds`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update a live stream
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + payload - Webinar 
    # + return - **HTTP Status Code:** `204`   Meeting live stream updated. 
    resource isolated function patch webinars/[int webinarId]/livestream(WebinarIdLivestreamBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/livestream`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update live stream status
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + payload - Webinar 
    # + return - **HTTP Status Code:** `204`    Meeting live stream updated. 
    resource isolated function patch webinars/[int webinarId]/livestream/status(LivestreamStatusBody1 payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/livestream/status`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update registration questions
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + payload - Webinar registrant questions 
    # + return - **HTTP Status Code:** `204`   Webinar registrant questions updated. 
    resource isolated function patch webinars/[int webinarId]/registrants/questions(RegistrantsQuestionsBody2 payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/registrants/questions`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update a webinar survey
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`     Webinar survey updated. 
    resource isolated function patch webinars/[int webinarId]/survey(WebinarIdSurveyBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/survey`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Add a new device
    #
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status:** `202` **Accepted** Request processed successfully. 
    resource isolated function post devices(DevicesBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/devices`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Assign a device to a user or commonarea
    #
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204` **No Content**   Request processed successfully. 
    resource isolated function post devices/zpa/assignment(ZpaAssignmentBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/devices/zpa/assignment`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # upgrade zpa os/app
    #
    # + headers - Headers to be sent with the request 
    # + return - The upgrade request has been accepted and is currently being processed. 
    resource isolated function post devices/zpa/upgrade(ZpaUpgradeBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/devices/zpa/upgrade`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a H.323/SIP device
    #
    # + headers - Headers to be sent with the request 
    # + payload - H.323/SIP device. 
    # + return - **HTTP Status Code:** `201`   H.323/SIP device created. 
    resource isolated function post h323/devices(TheH323SIPDeviceObject payload, map<string|string[]> headers = {}) returns InlineResponse2011|error {
        string resourcePath = string `/h323/devices`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create meeting's invite links
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `201`    Meeting invitation links created. 
    resource isolated function post meetings/[int meetingId]/invite_links(MeetingIdInviteLinksBody payload, map<string|string[]> headers = {}) returns InlineResponse2014|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/invite_links`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Add a meeting app
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `201` App added. 
    resource isolated function post meetings/[int meetingId]/open_apps(map<string|string[]> headers = {}) returns InlineResponse2015|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/open_apps`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a meeting poll
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + payload - The meeting poll object. 
    # + return - **HTTP Status Code:** `201`    Meeting Poll Created 
    resource isolated function post meetings/[int meetingId]/polls(MeetingIdPollsBody payload, map<string|string[]> headers = {}) returns InlineResponse2016|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/polls`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a recording registrant
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `201`    Registration submitted. 
    resource isolated function post meetings/[int meetingId]/recordings/registrants(RecordingsRegistrantsBody payload, map<string|string[]> headers = {}) returns InlineResponse201|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/recordings/registrants`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Add a meeting registrant
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `201`    Meeting registration created. 
    resource isolated function post meetings/[int meetingId]/registrants(MeetingIdRegistrantsBody payload, map<string|string[]> headers = {}, *MeetingRegistrantCreateQueries queries) returns InlineResponse2017|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/registrants`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Get a meeting SIP URI with Passcode
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Meeting's encoded SIP URI returned. 
    resource isolated function post meetings/[int meetingId]/sip_dialing(MeetingIdSipDialingBody payload, map<string|string[]> headers = {}) returns InlineResponse20019|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/sip_dialing`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Perform batch poll creation
    #
    # + headers - Headers to be sent with the request 
    # + payload - The batch meeting poll object 
    # + return - **HTTP Status Code:** `201`    Meeting Poll Created 
    resource isolated function post meetings/[string meetingId]/batch_polls(MeetingIdBatchPollsBody payload, map<string|string[]> headers = {}) returns InlineResponse2012|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/batch_polls`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Perform batch registration
    #
    # + meetingId - Unique identifier of the meeting (Meeting Number).
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**    Registrants added. 
    resource isolated function post meetings/[string meetingId]/batch_registrants(MeetingIdBatchRegistrantsBody payload, map<string|string[]> headers = {}) returns InlineResponse2013|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/batch_registrants`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Enable SIP phone
    #
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `201`   SIP Phone Created. 
    resource isolated function post sip_phones(SipPhonesBody payload, map<string|string[]> headers = {}) returns InlineResponse20110|error {
        string resourcePath = string `/sip_phones`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a tracking field
    #
    # + headers - Headers to be sent with the request 
    # + payload - Tracking Field 
    # + return - **HTTP Status Code:** `201`   Tracking Field created 
    resource isolated function post tracking_fields(TrackingField payload, map<string|string[]> headers = {}) returns InlineResponse20112|error {
        string resourcePath = string `/tracking_fields`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Add a user's TSP account
    #
    # + userId - The user ID or email address of the user. For user-level apps, pass the `me` value.
    # + headers - Headers to be sent with the request 
    # + payload - TSP account. 
    # + return - **HTTP Status Code:** `201`   TSP account added. 
    resource isolated function post users/[UserId2 userId]/tsp(TSPAccountsList payload, map<string|string[]> headers = {}) returns InlineResponse20111|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/tsp`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a meeting template from an existing meeting
    #
    # + userId - The user ID retrievable from the [List users](/docs/api/rest/reference/user/methods/#operation/users) API.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `201`   Meeting template created. 
    resource isolated function post users/[string userId]/meeting_templates(UserIdMeetingTemplatesBody payload, map<string|string[]> headers = {}) returns InlineResponse2018|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/meeting_templates`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a meeting
    #
    # + userId - The user's user ID or email address. For user-level apps, pass the `me` value.
    # + headers - Headers to be sent with the request 
    # + payload - Meeting object. 
    # + return - **HTTP Status Code:** `201`   Meeting created. 
    resource isolated function post users/[string userId]/meetings(UserIdMeetingsBody payload, map<string|string[]> headers = {}) returns InlineResponse2019|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/meetings`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a webinar template
    #
    # + userId - The user ID retrievable from the [List users](/api-reference/zoom-api/methods#operation/users) API.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `201`   Webinar template created. 
    resource isolated function post users/[string userId]/webinar_templates(UserIdWebinarTemplatesBody payload, map<string|string[]> headers = {}) returns InlineResponse20113|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/webinar_templates`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a webinar
    #
    # + userId - The user ID or email address of the user. For user-level apps, pass the `me` value.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `201`   Webinar created. 
    resource isolated function post users/[string userId]/webinars(UserIdWebinarsBody payload, map<string|string[]> headers = {}) returns InlineResponse20114|error {
        string resourcePath = string `/users/${getEncodedUri(userId)}/webinars`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a webinar's branding name tag
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `201`    Name tag created. 
    resource isolated function post webinars/[int webinarId]/branding/name_tags(BrandingNameTagsBody payload, map<string|string[]> headers = {}) returns InlineResponse20116|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/branding/name_tags`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Upload a webinar's branding virtual background
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `201`    Virtual background uploaded. 
    resource isolated function post webinars/[int webinarId]/branding/virtual_backgrounds(BrandingVirtualBackgroundsBody payload, map<string|string[]> headers = {}) returns InlineResponse20117|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/branding/virtual_backgrounds`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        mime:Entity[] bodyParts = check createBodyParts(payload);
        request.setBodyParts(bodyParts);
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Upload a webinar's branding wallpaper
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `201`    Webinar wallpaper uploaded. 
    resource isolated function post webinars/[int webinarId]/branding/wallpaper(BrandingWallpaperBody payload, map<string|string[]> headers = {}) returns InlineResponse20118|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/branding/wallpaper`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        mime:Entity[] bodyParts = check createBodyParts(payload);
        request.setBodyParts(bodyParts);
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create webinar's invite links
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + payload - Webinar invite link object. 
    # + return - **HTTP Status Code:** `201`    Webinar Invite Links Created 
    resource isolated function post webinars/[int webinarId]/invite_links(WebinarIdInviteLinksBody payload, map<string|string[]> headers = {}) returns InlineResponse2014|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/invite_links`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Add panelists
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `201`   Panelist created. 
    resource isolated function post webinars/[int webinarId]/panelists(WebinarIdPanelistsBody payload, map<string|string[]> headers = {}) returns InlineResponse20119|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/panelists`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create a webinar's poll
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + payload - The Webinar poll object. 
    # + return - **HTTP Status Code:** `201`   Webinar Poll Created 
    resource isolated function post webinars/[int webinarId]/polls(WebinarIdPollsBody payload, map<string|string[]> headers = {}) returns InlineResponse20120|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/polls`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Add a webinar registrant
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `201`    Webinar registration created. 
    resource isolated function post webinars/[int webinarId]/registrants(WebinarIdRegistrantsBody payload, map<string|string[]> headers = {}, *WebinarRegistrantCreateQueries queries) returns InlineResponse20121|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/registrants`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Get a webinar SIP URI with passcode
    #
    # + webinarId - The webinar's ID. 
    # When storing this value in your database, store it as a long format integer and **not** an integer. Webinar IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `201`  Webinar's encoded SIP URI returned. 
    resource isolated function post webinars/[int webinarId]/sip_dialing(WebinarIdSipDialingBody payload, map<string|string[]> headers = {}) returns InlineResponse20122|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/sip_dialing`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Perform batch registration
    #
    # + webinarId - The webinar's unique identifier.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200` **OK**    Registrants added. 
    resource isolated function post webinars/[string webinarId]/batch_registrants(WebinarIdBatchRegistrantsBody payload, map<string|string[]> headers = {}) returns InlineResponse20115|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/batch_registrants`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Update a meeting poll
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + pollId - The poll ID
    # + headers - Headers to be sent with the request 
    # + payload - The meeting poll. 
    # + return - **HTTP Status Code:** `204`    Meeting Poll Updated 
    resource isolated function put meetings/[int meetingId]/polls/[string pollId](PollspollIdBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/polls/${getEncodedUri(pollId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update a registrant's status
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`   Registrant status updated. 
    resource isolated function put meetings/[int meetingId]/recordings/registrants/status(RegistrantsStatusBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/recordings/registrants/status`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update registrant's status
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `204`   Registrant status updated. 
    resource isolated function put meetings/[int meetingId]/registrants/status(RegistrantsStatusBody1 payload, map<string|string[]> headers = {}, *MeetingRegistrantStatusQueries queries) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/registrants/status`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update meeting status
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`   Meeting updated. 
    resource isolated function put meetings/[int meetingId]/status(MeetingIdStatusBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/status`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Recover a single recording
    #
    # + meetingId - To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance. 
    # To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request. 
    # + recordingId - The recording ID.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `204`      Meeting recording recovered. 
    resource isolated function put meetings/[string meetingId]/recordings/[string recordingId]/status(RecordingIdStatusBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingId)}/recordings/${getEncodedUri(recordingId)}/status`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Recover meeting recordings
    #
    # + meetingUUID - The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.
    # If the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls.
    # + headers - Headers to be sent with the request 
    # + return - **HTTP Status Code:** `200`    Recordings recovered.  **Error Code:** `200`   You do not have the right permissions. 
    resource isolated function put meetings/[string meetingUUID]/recordings/status(RecordingsStatusBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/meetings/${getEncodedUri(meetingUUID)}/recordings/status`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update a webinar poll
    #
    # + webinarId - The webinar's ID.
    # + pollId - The poll ID.
    # + headers - Headers to be sent with the request 
    # + payload - The webinar poll. 
    # + return - **HTTP Status Code:** `204`   Webinar Poll Updated 
    resource isolated function put webinars/[int webinarId]/polls/[string pollId](PollspollIdBody1 payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/polls/${getEncodedUri(pollId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update registrant's status
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - **HTTP Status Code:** `204` <br>  Registrant status updated. 
    resource isolated function put webinars/[int webinarId]/registrants/status(RegistrantsStatusBody2 payload, map<string|string[]> headers = {}, *WebinarRegistrantStatusQueries queries) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/registrants/status`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update webinar status
    #
    # + webinarId - The webinar's ID.
    # + headers - Headers to be sent with the request 
    # + return - Webinar plan subscription is missing. Enable webinar for this user once the subscription is added: {userId}. 
    resource isolated function put webinars/[int webinarId]/status(WebinarIdStatusBody payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/webinars/${getEncodedUri(webinarId)}/status`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["Authorization"] = self.apiKeyConfig?.Authorization;
        }
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }
}
