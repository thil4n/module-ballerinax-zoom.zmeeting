// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

listener http:Listener ep0 = new (443, config = {host: "api.zoom.us"});

service /v2 on ep0 {
    # Delete device
    #
    # + deviceId - Unique identifier of the device.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204` **No Content** Device deleted successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request 
    #
    # **Error Code:** `30055008` <br>
    # no permission. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found 
    #
    # **Error Code:** `30055012` <br>
    # no found unified deviceId. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete devices/[string deviceId]() returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete ZPA device by vendor and mac address
    #
    # + vendor - The device's manufacturer.
    # + macAddress - The device's mac address.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204` **No Content** Device deleted successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `30052026` <br>
    # Device is not ZPA. <br>
    # **Error Code:** `30055003` <br>
    # Device vendor does not support. <br>
    # **Error Code:** `30055007` <br>
    # Mac address is wrong. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `30051039` <br>
    # Zdm device not found. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete devices/zpa/vendors/[string vendor]/mac_addresses/[string macAddress]() returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete a H.323/SIP device
    #
    # + deviceId - The device ID.
    # + return - returns can be any of following types 
    # http:Ok (You do not have the permission to delete this device.)
    # http:NoContent (H.323/SIP device deleted.)
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete h323/devices/[string deviceId]() returns http:Ok|http:NoContent|http:NotFound|http:TooManyRequests {
    }

    # Delete a live meeting message
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, store it as a long-format integer and **not** an integer. Meeting IDs can be more than 10 digits.
    # + messageId - The live meeting chat message's unique identifier (UUID), in base64-encoded format.
    # + file_ids - The live webinar chat file's universally unique identifier, in base64-encoded format. Separate multiple values with commas.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   
    #
    # Meeting chat message deleted.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # * Only available for Paid accounts. 
    # * DLP is not enabled. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Meeting {meetingId} does not exist. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete live_meetings/[int meetingId]/chat/messages/[string messageId](string? file_ids) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete a live webinar message
    #
    # + webinarId - The webinar's ID.
    # + messageId - The live webinar chat message's unique identifier (UUID), in base64-encoded format.
    # + file_ids - The live webinar chat file's universally unique identifier (UUID), in base64-encoded format. Separate multiple values with commas.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   
    #
    # Webinar chat message deleted.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `300` <br>
    # DLP is not enabled on this account. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete live_webinars/[int webinarId]/chat/messages/[string messageId](string? file_ids) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete a meeting
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + occurrence_id - The meeting or webinar occurrence ID.
    # + schedule_for_reminder - `true`: Notify host and alternative host about the meeting cancellation via email.
    # `false`: Do not send any email notification.
    # + cancel_meeting_reminder - `true`: Notify registrants about the meeting cancellation via email. 
    # `false`: Do not send any email notification to meeting registrants. 
    # The default value of this field is `false`.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code**: `204`   
    #
    # Meeting deleted.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request 
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account: {accountId}.<br> <br>
    # **Error Code:** `3000` <br>
    # Cannot access meeting information.<br>Invalid occurrence_id.<br> <br>
    # **Error Code:** `3002` <br>
    # Sorry, you cannot delete this meeting since it is in progress.<br> <br>
    # **Error Code:** `3003` <br>
    # You are not the meeting host.<br> <br>
    # **Error Code:** `3007` <br>
    # Sorry, you cannot delete this meeting since it has ended.<br> <br>
    # **Error Code:** `3018` <br>
    # Not allowed to delete PMI.<br> <br>
    # **Error Code:** `3037` <br>
    # Not allowed to delete PAC. <br>
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found 
    #
    # **Error Code:** `1001` <br>
    # User does not exist: {userId}.<br> <br>
    # **Error Code:** `3001` <br>
    # Meeting with this {meetingId} is not found or has expired. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete meetings/[int meetingId](string? occurrence_id, boolean? schedule_for_reminder, boolean? cancel_meeting_reminder) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete a meeting app
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `201` App deleted.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid meeting ID. <br>
    # **Error Code:** `3000` <br>
    # Meeting {meetingId} has started. <br>
    # **Error Code:** `3000` <br>
    # Zoom Apps disabled. To use this feature, enable the **Zoom Apps Quick Launch Button** setting in the **Settings** page of the Zoom web portal. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {meetingId} <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete meetings/[int meetingId]/open_apps() returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete a meeting poll
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + pollId - The poll ID
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   
    #
    # Meeting Poll deleted)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request 
    #
    # **Error Code:** `4400` <br>
    # Meeting polls disabled. To enable this feature, enable the "Meeting Polls/Quizzes" setting in the Zoom web portal's "Settings" interface. <br>
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found 
    #
    # **Error Code:** `404` <br>
    # Meeting Poll not found <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete meetings/[int meetingId]/polls/[string pollId]() returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete a meeting registrant
    #
    # + occurrence_id - The meeting occurrence ID.
    # + meetingId - The meeting ID.
    # + registrantId - The meeting registrant ID.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP status code:** `204`   
    #
    # OK)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `200` <br>
    # Only available for paid users: {0}.<br>
    #
    # **Error Code:** `300` <br>
    # The value that you entered for the Registrant ID field is invalid. Enter a valid value and try again.<br>
    #
    # **Error Code:** `404` <br>
    # Registration has not been enabled for this meeting: {0}.<br>
    #
    # **Error Code:** `1001` <br>
    # User {userId} does not exist or does not belong to this account.<br>
    #
    # **Error Code:** `3000` <br>
    # Cannot access webinar info.
    #
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {0}.
    #
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete meetings/[int meetingId]/registrants/[string registrantId](string? occurrence_id) returns http:NoContent|http:BadRequest|http:TooManyRequests {
    }

    # Delete a meeting survey
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   
    #
    # Meeting survey deleted.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `300` <br>
    # Invalid meeting ID.
    #
    # **Error Code:** `3000` <br>
    # * Cannot access Webinar information. <br>
    # * Meeting survey disabled. To enable this feature, enable the "Meeting Survey" setting in the Zoom web portal's "Settings" interface.
    #
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `300` <br>
    # Meeting ID does not exist.
    #
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {meetingId}.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete meetings/[int meetingId]/survey() returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete meeting or webinar recordings
    #
    # + meetingId - To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance. 
    # To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request. 
    # + action - The recording delete actions:  
    # `trash` - Move recording to trash.  
    # `delete` - Delete recording permanently.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Recordings deleted. 
    #
    # **Error Code:** `200`   
    #
    # You do not have the right permission.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account: {accountId}. <br>
    # **Error Code:** `3310` <br>
    # This recording was selected for a simulive webinar. You cannot delete or trash it. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User {userId} does not exist or does not belong to this account.<br> <br>
    # **Error Code:** `3301` <br>
    # There is no recording for this meeting. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete meetings/[string meetingId]/recordings("trash"|"delete" action = "trash") returns http:Ok|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete a recording file for a meeting or webinar
    #
    # + meetingId - To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance. 
    # To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request. 
    # + recordingId - The recording ID.
    # + action - The recording delete actions. 
    # `trash` - Move recording to trash.  
    # `delete` - Delete recording permanently.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Recording deleted. 
    #
    # **Error Code:** `200`  
    #
    # You do not have the right permissions.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account: {accountId}.<br> <br>
    # **Error Code:** `3303` <br>
    # You can not delete an uncompleted meeting. <br>
    # **Error Code:** `3310` <br>
    # This recording was selected for a simulive webinar. You cannot delete or trash it. <br>
    # **Error Code:** `3310` <br>
    # Unable to delete this file because this recording is being used for Zoom IQ for Sales. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User {userId} does not exist or does not belong to this account.<br> <br>
    # **Error Code:** `3301` <br>
    # There is no recording for this meeting. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete meetings/[string meetingId]/recordings/[string recordingId]("trash"|"delete" action = "trash") returns http:Ok|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete a meeting's archived files
    #
    # + meetingUUID - The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.
    # If the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   
    #
    # Meeting archived file deleted.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # Only available for Paid account. <br>
    # **Error Code:** `200` <br>
    # Not available for this account. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {0} <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete past_meetings/[string meetingUUID]/archive_files() returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete SIP phone
    #
    # + phoneId - The SIP phone ID. It can be retrieved from the List SIP phones API.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   SIP phone deleted.)
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete sip_phones/[string phoneId]() returns http:NoContent|http:TooManyRequests {
    }

    # Delete a tracking field
    #
    # + fieldId - The tracking field ID.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`  
    #
    # Tracking Field deleted)
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete tracking_fields/[string fieldId]() returns http:NoContent|http:NotFound|http:TooManyRequests {
    }

    # Delete a user's TSP account
    #
    # + userId - The user ID or email address of the user. For user-level apps, pass the `me` value.
    # + tspId - TSP account ID.
    # + return - returns can be any of following types 
    # http:NoContent (**Status Code:** `204` **No Content**  
    #
    # TSP account deleted.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `2024` <br>
    # Account not enable TSP.<br>
    #
    # **Error Code:** `300` <br>
    # The TSP id provided does not exist.<br>
    #
    # **Error Code:** `300` <br>
    # TSP Config does not exist.<br>
    #
    # **Error Code:** `300` <br>
    # At least one tsp config must be available.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `1001` <br>
    # User does not exist: $userId.<br>
    #
    # **Error Code:** `1120` <br>
    # A valid invitation to join the Zoom account was not found for this user.<br>
    # This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete users/[UserId4 userId]/tsp/["1"|"2" tspId]() returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete a webinar
    #
    # + webinarId - The webinar's ID.
    # + occurrence_id - The meeting or webinar occurrence ID.
    # + cancel_webinar_reminder - `true` - Notify panelists and registrants about the webinar cancellation via email. 
    # `false` - Do not send any email notification to webinar registrants and panelists. 
    # The default value of this field is `false`.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204` <br>
    # Webinar deleted.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `3000` <br>
    # Your request could not be processed because webinars created via event directory can not be updated or deleted using this method. <br>
    # **Error Code:** `3000` <br>
    # You cannot update or delete simulive webinars that have started using this method. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `3000` <br>
    # Webinar occurrence does not exist. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete webinars/[int webinarId](string? occurrence_id, boolean? cancel_webinar_reminder) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete a webinar's branding name tag
    #
    # + webinarId - The webinar's ID.
    # + name_tag_ids - A comma-separated list of the name tag IDs to delete.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   
    #
    # * No content. 
    # * Name tag(s) deleted.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid parameter: `name_tag_ids`. <br>
    # **Error Code:** `3000` <br>
    # This webinar does not have session branding enabled. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete webinars/[int webinarId]/branding/name_tags(string? name_tag_ids) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete a webinar's branding virtual backgrounds
    #
    # + webinarId - The webinar's ID.
    # + ids - A comma-separated list of the virtual background file IDs to delete.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   
    #
    # * No content. 
    # * Virtual background file(s) deleted.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid parameter: `ids`. <br>
    # **Error Code:** `3000` <br>
    # This webinar does not have session branding enabled. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete webinars/[int webinarId]/branding/virtual_backgrounds(string? ids) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete a webinar's branding wallpaper
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   
    #
    # * No content. 
    # * Webinar wallpaper deleted.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `3000` <br>
    # This webinar does not have session branding enabled. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests  For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete webinars/[int webinarId]/branding/wallpaper() returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Remove all panelists
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`  
    #
    # Panelists removed.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete webinars/[int webinarId]/panelists() returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Remove a panelist
    #
    # + webinarId - The webinar's ID.
    # + panelistId - The panelist's ID or email.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`  
    #
    # Panelist removed.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete webinars/[int webinarId]/panelists/[string panelistId]() returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete a webinar poll
    #
    # + webinarId - The webinar's ID.
    # + pollId - The poll ID
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`  
    #
    # Webinar Poll deleted)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `4400` <br>
    # Webinar polls disabled. To enable this feature, enable the **Webinar Polls/Quizzes** setting in the Zoom web portal's **Settings** interface. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # **Error Code:** `4400` <br>
    # Invalid poll IDs. <br>
    # **Error Code:** `4400` <br>
    # Cannot update or delete the poll within the Survey Library. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete webinars/[int webinarId]/polls/[string pollId]() returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete a webinar registrant
    #
    # + webinarId - The webinar ID.
    # + registrantId - The registrant ID.
    # + occurrence_id - The webinar occurrence ID.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP status code:** `204`   
    #
    # OK)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # **Error Code:** `300` <br>
    # The value that you entered for the Registrant ID field is invalid. Enter a valid value and try again. <br>
    # **Error Code:** `3000` <br>
    # Registration has not been enabled for this webinar: {webinarId}. <br>
    # **Error Code:** `3000` <br>
    # Registrant {registrantId} was not found. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests  For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete webinars/[int webinarId]/registrants/[string registrantId](string? occurrence_id) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Delete a webinar survey
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   
    #
    # Webinar survey deleted.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `3000` <br>
    # Webinar survey disabled. To enable this feature, enable the **Webinar Survey** setting in the Zoom web portal's **Settings** interface. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function delete webinars/[int webinarId]/survey() returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List archived files
    #
    # + page_size - The number of records returned within a single API call.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
    # + 'from - The query start date, in `yyyy-MM-dd'T'HH:mm:ssZ` format. This value and the `to` query parameter value cannot exceed seven days.
    # + to - The query end date, in `yyyy-MM-dd'T'HH:mm:ssZ` format. This value and the `from` query parameter value cannot exceed seven days.
    # + query_date_type - The type of query date.
    # * `meeting_start_time` 
    # * `archive_complete_time` 
    # This value defaults to `meeting_start_time`.
    # + group_id - Deprecated. Please use 'group_ids' for querying.
    # + group_ids - The group IDs. To get a group ID, use the [List groups](https://developers.zoom.us/docs/api/rest/reference/scim-api/methods/#operation/groupSCIM2List) API.
    # (The maximum number of supported groups for filtering is 7.)
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Archived files returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `2001` <br>
    # Account does not exist: {accountId} <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get archive_files(string? next_page_token, string? 'from, string? to, string? group_id, string? group_ids, int page_size = 30, "meeting_start_time"|"archive_complete_time" query_date_type = "meeting_start_time") returns InlineResponse200|http:BadRequest|http:TooManyRequests {
    }

    # Get archived file statistics
    #
    # + 'from - The query start date, in `yyyy-MM-dd'T'HH:mm:ssZ` format. This value and the `to` query parameter value cannot exceed seven days.
    # + to - The query end date, in `yyyy-MM-dd'T'HH:mm:ssZ` format. This value and the `from` query parameter value cannot exceed seven days.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # The statistics of Archived files returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `2001` <br>
    # Account does not exist: {accountId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get archive_files/statistics(string? 'from, string? to) returns InlineResponse2001|http:BadRequest|http:TooManyRequests {
    }

    # List devices
    #
    # + search_text - Filter devices by name or serial number.
    # + platform_os - Filter devices by platform operating system.
    # + is_enrolled_in_zdm - Filter devices by enrollment of ZDM (Zoom Device Management).
    # + device_type - Filter devices by device type.  
    # Device Type:  
    # `-1` - All Zoom Room device(0,1,2,3,4,6).  
    # `0` - Zoom Rooms Computer.  
    # `1` - Zoom Rooms Controller.  
    # `2` - Zoom Rooms Scheduling Display.  
    # `3` - Zoom Rooms Control System.  
    # `4` -  Zoom Rooms Whiteboard.  
    # `5` - Zoom Phone Appliance.  
    # `6` - Zoom Rooms Computer (with Controller).
    # + device_vendor - Filter devices by vendor.
    # + device_model - Filter devices by model.
    # + device_status - Filter devices by status.   
    # Device Status:  
    # `0` - offline.  
    # `1` - online.  
    # `-1` - unlink
    # + page_size - The number of records returned within a single API call.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` **OK**  
    #
    # Device detail returned successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `30055008` <br>
    # no permission.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get devices(string? search_text, "win"|"mac"|"ipad"|"iphone"|"android"|"linux"? platform_os, string? device_vendor, string? device_model, string? next_page_token, boolean is_enrolled_in_zdm = true, -1|0|1|2|3|4|5|6 device_type = -1, -1|0|1 device_status = -1, int page_size = 30) returns InlineResponse2007|http:BadRequest|http:TooManyRequests {
    }

    # Get device detail
    #
    # + deviceId - The device's unique identifier.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` **OK** 
    #
    # Device detail returned successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request 
    #
    # **Error Code:** `30055008` <br>
    # No permission. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found 
    #
    # **Error Code:** `30055012` <br>
    # No found unified deviceId. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get devices/[string deviceId]() returns InlineResponse20010|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get ZDM group info
    #
    # + page_size - The total number of records returned from a single API call.
    # Default - 30.
    # Max -100.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period token is 15 minutes.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` **OK**  Version detail returned successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `30051037` <br>
    # Invalid parameters. <br>
    # )
    # http:Forbidden (**HTTP Status Code:** `403` <br>
    # Forbidden  
    #
    # **Error Code:** `30055008` <br>
    # No permission. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get devices/groups(int? page_size, string? next_page_token) returns InlineResponse2008|http:BadRequest|http:Forbidden|http:TooManyRequests {
    }

    # Get ZPA version info
    #
    # + zdmGroupId - The Zoom Device Management (ZDM) group ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` **OK**  Version detail returned successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `30051037` <br>
    # * AccountId is empty. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `30052027` <br>
    # * ZdmGroup not found. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get devices/zpa/zdm_groups/[string zdmGroupId]/versions() returns InlineResponse2009|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List H.323/SIP devices
    #
    # + page_size - The number of records returned within a single API call.
    # + page_number - **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # List of H.323/SIP devices returned.  
    #
    # **Error Code:** `200`  
    #
    # No permission.)
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get h323/devices(string? next_page_token, int page_size = 30, int page_number = 1) returns H323SIPDeviceList|http:TooManyRequests {
    }

    # Get a meeting
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be more than 10 digits.
    # + occurrence_id - Meeting occurrence ID. Provide this field to view meeting details of a particular occurrence of the [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings).
    # + show_previous_occurrences - Set this field's value to `true` to view meeting details of all previous occurrences of a [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings). 
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Meeting object returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `3000` <br>
    # Cannot access webinar info. <br>
    # **Error Code:** `3161` <br>
    # Your user account is not allowed meeting hosting and scheduling capabilities. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {meetingId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[int meetingId](string? occurrence_id, boolean? show_previous_occurrences) returns InlineResponse20012|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get meeting invitation
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Meeting invitation returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request 
    #
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[int meetingId]/invitation() returns MeetingInvitation|http:BadRequest|http:TooManyRequests {
    }

    # Get a meeting's join token for live streaming
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Meeting live streaming token returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `300` <br>
    # Invalid meeting ID.
    #
    # **Error Code:** `3000` <br>
    # Cannot access Webinar information.
    #
    # **Error Code:** `124` <br>
    # This API only supports OAuth2 authorization.
    #
    # **Error Code:** `3000` <br>
    # Not allowed to start live streaming. To use this feature, enable the "Allow livestreaming of meetings" setting in the "Settings" page of the Zoom web portal.
    #
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `300` <br>
    # Meeting ID does not exist.
    #
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {meetingId}
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[int meetingId]/jointoken/live_streaming() returns InlineResponse20013|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a meeting's archive token for local archiving
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Meeting local archiving token returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `300` <br>
    # Invalid meeting ID.
    #
    # **Error Code:** `3000` <br>
    # Cannot access Webinar information.
    #
    # **Error Code:** `124` <br>
    # This API only supports OAuth2 authorization.
    #
    # **Error Code:** `3000` <br>
    # Not allowed to start local archiving. To use this feature, enable the "Archive meetings and webinars" setting in the "Settings" page of the Zoom web portal.
    #
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `300` <br>
    # Meeting ID does not exist.
    #
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {meetingId}
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[int meetingId]/jointoken/local_archiving() returns InlineResponse20014|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a meeting's join token for local recording
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + bypass_waiting_room - Whether to bypass the waiting room.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Meeting local recording token returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid meeting ID. <br>
    # **Error Code:** `3000` <br>
    # Cannot access Webinar information. <br>
    # **Error Code:** `124` <br>
    # This API only supports OAuth2 authorization. <br>
    # **Error Code:** `3000` <br>
    # Not allowed to start local recording. To use this feature, enable the "Local Recording" setting in the "Settings" page of the Zoom web portal. <br>
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `300` <br>
    # Meeting ID does not exist. <br>
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {meetingId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[int meetingId]/jointoken/local_recording(boolean? bypass_waiting_room) returns InlineResponse20015|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List meeting polls
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + anonymous - Whether to query for polls with the **Anonymous** option enabled: 
    # * `true` &mdash; Query for polls with the **Anonymous** option enabled. 
    # * `false` &mdash; Do not query for polls with the **Anonymous** option enabled.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:**   
    #
    # List polls of a Meeting  returned)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `4400` <br>
    # Meeting polls disabled. To enable this feature, enable the "Meeting Polls/Quizzes" setting in the Zoom web portal's "Settings" interface. <br>
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `404` <br>
    # Meeting Poll not found <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[int meetingId]/polls(boolean? anonymous) returns PollList|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a meeting poll
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + pollId - The poll ID
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Meeting Poll object returned)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `4400` <br>
    # Meeting polls disabled. To enable this feature, enable the "Meeting Polls/Quizzes" setting in the Zoom web portal's "Settings" interface. <br>
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `404` <br>
    # Meeting Poll not found. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[int meetingId]/polls/[string pollId]() returns InlineResponse20017|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List recording registrants
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + status - Query by the registrant's status. 
    # * `pending` - The registration is pending. 
    # * `approved` - The registrant is approved. 
    # * `denied` - The registration is denied.
    # + page_size - The number of records returned within a single API call.
    # + page_number - **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Registrants returned.)
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[int meetingId]/recordings/registrants(string? next_page_token, "pending"|"approved"|"denied" status = "approved", int page_size = 30, int page_number = 1) returns MeetingCloudRecordingRegistration|http:NotFound|http:TooManyRequests {
    }

    # List meeting registrants
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + occurrence_id - The meeting or webinar occurrence ID.
    # + status - Query by the registrant's status. 
    # * `pending` - The registration is pending. 
    # * `approved` - The registrant is approved. 
    # * `denied` - The registration is denied.
    # + page_size - The number of records returned within a single API call.
    # + page_number - **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Successfully listed meeting registrants.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request 
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account: {accountId}.<br> <br>
    # **Error Code:** `3003` <br>
    # You are not the meeting host.<br> <br>
    # **Error Code:** `3000` <br>
    # Cannot access meeting info. <br>
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found 
    #
    # **Error Code:** `1001` <br>
    # Meeting host does not exist: {userId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[int meetingId]/registrants(string? occurrence_id, string? next_page_token, "pending"|"approved"|"denied" status = "approved", int page_size = 30, int page_number = 1) returns RegistrationList|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a meeting registrant
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + registrantId - The registrant ID.
    # + return - returns can be any of following types 
    # http:Ok (Success.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request 
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account: "{accountId}"<br> <br>
    # **Error Code:** `3003` <br>
    # You are not the meeting host.<br> <br>
    # **Error Code:** `3000` <br>
    # >
    # Cannot access meeting info. <br>
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found 
    #
    # **Error Code:** `1001` <br>
    # Meeting host does not exist: "{userId}" <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[int meetingId]/registrants/[string registrantId]() returns MeetingRegistrant|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List registration questions 
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Meeting Registrant Question object returned)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[int meetingId]/registrants/questions() returns InlineResponse20018|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a meeting survey
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be more than 10 digits.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Meeting survey object returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request 
    #
    # **Error Code:** `300` <br>
    # Invalid meeting ID. <br>
    # **Error Code:** `3000` <br>
    # Cannot access Webinar information. <br>
    # **Error Code:** `3000` <br>
    # Meeting survey disabled. To enable this feature, enable the "Meeting Survey" setting in the Zoom web portal's "Settings" interface. <br>
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found 
    #
    # **Error Code:** `300` <br>
    # Meeting ID does not exist. <br>
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {meetingId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[int meetingId]/survey() returns MeetingSurveyObject|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get meeting's token
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + 'type - The meeting token type. 
    # * `closed_caption_token` - The third-party closed caption API token. 
    # This defaults to `closed_caption_token`.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Meeting token returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid meeting ID. <br>
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # **Error Code:** `3000` <br>
    # Cannot access webinar information. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `300` <br>
    # Meeting ID does not exist. <br>
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {meetingId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[int meetingId]/token("closed_caption_token" 'type = "closed_caption_token") returns InlineResponse20020|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get livestream details
    #
    # + meetingId - Unique identifier of the meeting.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` **OK**  
    #
    # Live Stream details returned.
    #
    # )
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `300` <br>
    # Missing meetingId<br>
    # Invalid meetingId<br><br>
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account: {accountId}
    #
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `1001` <br>
    # User {userId} does not exist.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[string meetingId]/livestream() returns InlineResponse20016|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a meeting summary
    #
    # + meetingId - The meeting's universally unique ID (UUID). When you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`Meeting Poll object returned.)
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[string meetingId]/meeting_summary() returns InlineResponse20051|http:TooManyRequests {
    }

    # Get meeting recordings
    #
    # + meetingId - To get a meeting's cloud recordings, provide the meeting ID or UUID. If providing the meeting ID instead of UUID, the response will be for the latest meeting instance. 
    # To get a webinar's cloud recordings, provide the webinar's ID or UUID. If providing the webinar ID instead of UUID, the response will be for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//` (example: `/ajXp112QmuoKj4854875==`), **[double encode](/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the UUID** before making an API request. 
    # + include_fields - Include fields in the response. Currently, only accepts `download_access_token` to get this token field and value for downloading the meeting's recordings. The `download_access_token` requires **View the recording content** enabled for the role authorizing the account. Use the format `include_fields=download_access_token`.
    # + ttl - The `download_access_token` Time to Live (TTL) value. This parameter is only valid if the `include_fields` query parameter contains the value `download_access_token`.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Recording object returned. 
    #
    # **Error Code:** `200`   
    #
    # You do not have the right permissions.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `1010` <br>
    # User not found on this account: {accountId}. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User "{userId}" does not exist or does not belong to this account. <br>
    # **Error Code:** `3301` <br>
    # There is no recording for this meeting. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[string meetingId]/recordings(string? include_fields, int? ttl) returns InlineResponse2003|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a meeting or webinar recording's analytics details
    #
    # + meetingId - To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance. 
    # To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request. 
    # + page_size - The number of records returned within a single API call.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
    # + 'from - The start date for the monthly range to query. The maximum range can be a month. If you do not provide this value, this defaults to the current date.
    # + to - The end date for the monthly range to query. The maximum range can be a month.
    # + 'type - The type of analytics details: 
    # * `by_view` &mdash; by_view. 
    # * `by_download` &mdash; by_download.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Analytics Detail listed successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `1010` <br>
    # User not found on this account: {accountId}. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User "{userId}" does not exist or does not belong to this account. <br>
    # **Error Code:** `3301` <br>
    # There is no recording for this meeting. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[string meetingId]/recordings/analytics_details(string? next_page_token, string? 'from, string? to, "by_view"|"by_download"? 'type, int page_size = 30) returns InlineResponse2004|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a meeting or webinar recording's analytics summary
    #
    # + meetingId - To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance. 
    # To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request. 
    # + 'from - The start date for the monthly range to query. The maximum range can be a month. If you do not provide this value, this defaults to the current date.
    # + to - The end date for the monthly range to query. The maximum range can be a month.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Analytics Summary listed successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `1010` <br>
    # User not found on this account: {accountId}. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User "{userId}" does not exist or does not belong to this account. <br>
    # **Error Code:** `3301` <br>
    # There is no recording for this meeting. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[string meetingId]/recordings/analytics_summary(string? 'from, string? to) returns InlineResponse2005|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get registration questions
    #
    # + meetingId - To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance. 
    # To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request. 
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Recording registrant question object returned.)
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[string meetingId]/recordings/registrants/questions() returns RecordingRegistrantQuestions|http:NotFound|http:TooManyRequests {
    }

    # Get meeting recording settings
    #
    # + meetingId - The meeting ID lets you get cloud recording of a meeting or webinar.
    # * Meeting - Provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response is for the latest meeting instance. 
    # * Webinar - Provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response is for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//` (example: `/ajXp112QmuoKj4854875==`), you must **double encode** the UUID before making an API request. 
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`    Meeting recording settings returned.)
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/[string meetingId]/recordings/settings() returns RecordingSettings|http:NotFound|http:TooManyRequests {
    }

    # List meeting summaries of an account
    #
    # + page_size - The number of records returned within a single API call.
    # + next_page_token - The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # + 'from - The start date in `yyyy-MM-dd'T'HH:mm:ss'Z'` UTC format used to retrieve the creation date range of the meeting summaries.
    # + to - The end date in `yyyy-MM-dd'T'HH:mm:ss'Z'` UTC format used to retrieve the creation date range of the meeting summaries.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`
    #
    # Successfully listed meeting summaries of an account.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request 
    #
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # **Error Code:** `3000` <br>
    # Meeting summary disabled. To enable this feature, enable the "Meeting Summary with AI Companion" setting in the Zoom web portal's "Settings" interface. <br>
    # )
    # http:Unauthorized (**HTTP Status Code:** `401` <br>
    # Unauthorized 
    #
    # **Error Code:** `1001` <br>
    # User {userId} not exist or not belong to this account. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get meetings/meeting_summaries(string? next_page_token, string? 'from, string? to, int page_size = 30) returns InlineResponse20011|http:BadRequest|http:Unauthorized|http:TooManyRequests {
    }

    # Get past meeting details
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Meeting information returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `1010` <br>
    # * User does not exist: {userId} 
    # * User "{userId}" does not exist or does not belong to this account.
    #
    # **Error Code:** `300` <br>
    # Cannot access meeting information.
    #
    # **Error Code:** `200` <br>
    # Only available for paid account: {accountId}
    #
    # **Error Code:** `12702` <br>
    # Can not access a meeting a year ago.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `3001` <br>
    # * This meeting is not available or the meeting ID is invalid. 
    # * The meeting ID is invalid or the meeting has not ended.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get past_meetings/[MeetingId meetingId]() returns InlineResponse20021|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List past meeting instances
    #
    # + meetingId - The past meeting's ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # List of ended meeting instances returned.)
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get past_meetings/[int meetingId]/instances() returns MeetingInstances|http:NotFound|http:TooManyRequests {
    }

    # Get past meeting participants
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    # + page_size - The number of records returned within a single API call.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Meeting participants' report returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `1010` <br>
    # User {userId} not exist or not belong to this account.<br><br> <br>
    # **Error Code:** `300` <br>
    # Cannot access meeting information.<br><br> <br>
    # **Error Code:** `200` <br>
    # Only available for paid account: {accountId} <br>
    # **Error Code:** `12702` <br>
    # Can not access a meeting a year ago. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User {userId} not exist or not belong to this account.<br>
    # User not exist: {userId}<br><br> <br>
    # **Error Code:** `3001` <br>
    # This meeting is not available or ID is not valid.<br>
    # Meeting ID is invalid or not end. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get past_meetings/[string meetingId]/participants(string? next_page_token, int page_size = 30) returns InlineResponse20022|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List past meeting's poll results
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` **OK**  
    #
    # Polls returned successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request 
    #
    # **Error Code:** `12702` <br>
    # Can not access a meeting a year ago. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get past_meetings/[string meetingId]/polls() returns InlineResponse20023|http:BadRequest|http:TooManyRequests {
    }

    # List past meetings' Q&A
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` **OK**  
    #
    # Q&amp;A returned successfully.)
    # http:Unauthorized (**HTTP Status Code:** `401` <br>
    # Unauthorized  
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account:{accountId}. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Meeting ID is invalid or not end.<br>
    # This meeting ID does not belong to you: {meetingId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get past_meetings/[string meetingId]/qa() returns InlineResponse20024|http:Unauthorized|http:NotFound|http:TooManyRequests {
    }

    # Get a meeting's archived files
    #
    # + meetingUUID - The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. After a meeting ends, a new UUID is generated for the next meeting instance.
    # If the meeting UUID begins with a `/` character or contains a `//` character, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID when using the meeting UUID for other API calls.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Meeting archived files returned.)
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Meeting {meetingUUId} does not exist. <br> <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get past_meetings/[string meetingUUID]/archive_files() returns InlineResponse2002|http:NotFound|http:TooManyRequests {
    }

    # List past webinar instances
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # List of past webinar instances returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get past_webinars/[int webinarId]/instances() returns WebinarInstances|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get webinar absentees
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API will return a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
    # + occurrence_id - The meeting or webinar occurrence ID.
    # + page_size - The number of records returned within a single API call.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Success.  
    # **Error Code:** `200`  
    #
    # Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # The request could not be completed because you have provided an invalid occurrence ID: {occurrenceId}<br> <br>
    # **Error Code:** `1010` <br>
    # User does not belong to this account:{accountId}.<br> <br>
    # **Error Code:** `3000` <br>
    # This Webinar has not registration required: {webinarUUID} <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar {webinarUUID} not found or expired. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests  For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get past_webinars/[string webinarId]/absentees(string? occurrence_id, string? next_page_token, int page_size = 30) returns RegistrationList1|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List webinar participants
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API returns a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
    # + page_size - The number of records returned within a single API call.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` **OK**  
    #
    # Participants list returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `300` <br>
    # The next page token is invalid or expired. <br>
    # **Error Code:** `200` <br>
    # Only available for Paid or ZMP account: {accountId}. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get past_webinars/[string webinarId]/participants(string? next_page_token, int page_size = 30) returns InlineResponse20056|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List past webinar poll results
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API returns a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` **OK**  
    #
    # Polls returned successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # No permission. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar ID is invalid or not end. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get past_webinars/[string webinarId]/polls() returns InlineResponse20057|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List Q&As of a past webinar
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API returns a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` **OK**  
    #
    # Q&amp;A returned successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # No permission. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar ID is invalid or not end. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get past_webinars/[string webinarId]/qa() returns InlineResponse20058|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get sign In / sign out activity report
    #
    # + 'from - Start date for which you would like to view the activity logs report. Using the `from` and `to` parameters, specify a monthly date range for the report as the API only provides one month worth of data in one request. The specified date range should fall within the last six months.
    # + to - End date up to which you would like to view the activity logs report.
    # + page_size - The number of records to be returned within a single API call
    # + next_page_token - Next page token is used to paginate through large result sets
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Success)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `200` <br>
    # No permission.<br>
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/activities(string? 'from, string? to, int? page_size, string? next_page_token) returns InlineResponse20029|http:BadRequest|http:TooManyRequests {
    }

    # Get billing reports
    #
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` **OK**  
    #
    # Billing report returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `200` <br>
    # No permission.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/billing() returns InlineResponse20030|http:BadRequest|http:TooManyRequests {
    }

    # Get billing invoice reports
    #
    # + billing_id - Unique Identifier of the Billing Report. Retrieve this ID from the response of **Get Billing Reports** API request. 
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` **OK**  
    #
    # Billing Invoice reports returned.)
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `5010` <br>
    # Report does not exist.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/billing/invoices(string billing_id) returns InlineResponse20031|http:NotFound|http:TooManyRequests {
    }

    # Get cloud recording usage report
    #
    # + 'from - Start date in 'yyyy-mm-dd' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # + to - End date.
    # + group_id - The group ID. To get a group ID, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API. 
    # **Note:** The API response will only contain users who are members of the queried group ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Cloud Recording Report Returned)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `200` <br>
    # No permission.<br>
    # ’
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/cloud_recording(string 'from, string to, string? group_id) returns InlineResponse20032|http:BadRequest|http:TooManyRequests {
    }

    # Get daily usage report
    #
    # + year - Year for this report
    # + month - Month for this report
    # + group_id - The group ID. To get a group ID, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API. 
    # **Note:** The API response will only contain users who are members of the queried group ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Daily report retrieved.  
    #
    # This is only available for paid accounts:{accountId}.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `300` <br>
    # Daily report can only be provided for a month that falls within the recent 6 months.
    #
    # **Error Code:** `200` <br>
    # No permission.<br>
    # ’
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/daily(int? year, int? month, string? group_id) returns InlineResponse20033|http:BadRequest|http:TooManyRequests {
    }

    # Get a meeting activities report
    #
    # + 'from - The start date in 'yyyy-MM-dd'format. The date range defined by the `from` and `to` parameters should only be one month, as the report includes only one month's worth of data at once.
    # + to - The end date 'yyyy-MM-dd' format.
    # + page_size - The number of records to be returned within a single API call.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
    # + meeting_number - The meeting's number.
    # + search_key - An operator's name or email.
    # + activity_type - Activity type. 
    # -1 - All activities. 
    # 0 - Meeting created. 
    # 1 - Meeting started. 
    # 2 - User joined. 
    # 3 - User left. 
    # 4 - Remote control. 
    # 5 - In-meeting chat. 
    # 9 - Meeting ended.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  Success. Only available for Paid or ZMP account {accountId}.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # )
    # http:Forbidden (**HTTP Status Code:** `403` <br>
    # Forbidden  No permission. 
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account {accountId}.<br> <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/meeting_activities(string 'from, string to, string? next_page_token, string? meeting_number, string? search_key, int page_size = 30, "All Activities"|"Meeting Created"|"Meeting Started"|"User Join"|"User Left"|"Remote Control"|"In-Meeting Chat"|"Meeting Ended" activity_type = "All Activities") returns InlineResponse20034|http:BadRequest|http:Forbidden|http:NotFound|http:TooManyRequests {
    }

    # Get meeting detail reports
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Meeting details returned.  
    #
    # This is only available for paid account.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `12702` <br>
    # Can not access meeting a year ago.<br>
    #
    # **Error Code:** `200` <br>
    # No permission.<br>
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `3001` <br>
    # Meeting {meetingId} not found or has expired.<br>
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/meetings/[MeetingId1 meetingId]() returns InlineResponse20035|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get meeting poll reports
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` 
    # * Meeting polls report returned. 
    # * This is only available for paid account: {accountId})
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `12702` <br>
    # Can not access meeting a year ago.
    #
    # **Error Code:** `200` <br>
    # No permission.<br>
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `3001` <br>
    # Meeting "{meetingId}" not found or has expired.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/meetings/[MeetingId2 meetingId]/polls() returns InlineResponse20037|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get meeting participant reports
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    # + page_size - The number of records returned within a single API call.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
    # + include_fields - Provide `registrant_id` as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [meeting registrant](/docs/api-reference/zoom-api/methods#operation/meetingRegistrants).
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Meeting participants report returned.  
    #
    # Only available for Paid or ZMP account: {accountId}.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account:{accountId}.<br> <br>
    # **Error Code:** `12702` <br>
    # Can not access meeting a year ago.<br> <br>
    # **Error Code:** `200` <br>
    # No permission.<br> <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Meeting  {MeetingId} not found or has expired.<br> <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/meetings/[string meetingId]/participants(string? next_page_token, "registrant_id"? include_fields, int page_size = 30) returns InlineResponse20036|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get meeting Q&A report
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Meeting Q&amp;A report returned.  
    #
    # Only available for Paid or ZMP account: {accountId}.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # No permission.<br> <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User does not exist: {userId}.<br> <br>
    # **Error Code:** `3001` <br>
    # Meeting {meetingId} not found or has expired.<br> <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/meetings/[string meetingId]/qa() returns InlineResponse20038|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get meeting survey report
    #
    # + meetingId - The meeting's ID or universally unique ID (UUID). 
    # * If you provide a meeting ID, the API will return a response for the latest meeting instance. 
    # * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Meeting survey report returned.   
    #
    # Only available for Paid or ZMP account: {accountId}.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account:{accountId}.<br> <br>
    # **Error Code:** `12702` <br>
    # Can not access a webinar a year ago.<br> <br>
    # **Error Code:** `200` <br>
    # No permission.<br> <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar  {webinarId} not found or has expired.<br> <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/meetings/[string meetingId]/survey() returns InlineResponse20039|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get operation logs report
    #
    # + 'from - Start date in 'yyyy-mm-dd' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # + to - End date.
    # + page_size - The number of records returned within a single API call.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
    # + category_type - **Optional**  
    # Filter your response by a category type to see reports for a specific category.
    # The value for this field can be one of the following:  
    # `all`  
    # `user`  
    # `user_settings`  
    # `account`  
    # `billing`  
    # `im`  
    # `recording`  
    # `phone_contacts`  
    # `webinar`  
    # `sub_account`  
    # `role`  
    # `zoom_rooms`
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Operation Logs Report Returned)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `200` <br>
    # No permission.<br>
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/operationlogs(string 'from, string to, string? next_page_token, "all"|"user"|"user_settings"|"account"|"billing"|"im"|"recording"|"phone_contacts"|"webinar"|"sub_account"|"role"|"zoom_rooms"? category_type, int page_size = 30) returns InlineResponse20040|http:BadRequest|http:TooManyRequests {
    }

    # Get telephone reports
    #
    # + 'type - Audio types:  
    # `1` - Toll-free Call-in &amp; Call-out.  
    # `2` - Toll   
    # `3` - SIP Connected Audio
    # + query_date_type - The type of date to query. 
    # * `start_time` &mdash; Query by call start time. 
    # * `end_time` &mdash; Query by call end time. 
    # * `meeting_start_time` &mdash; Query by meeting start time. 
    # * `meeting_end_time` &mdash; Query by meeting end time. 
    # This value defaults to `start_time`.
    # + 'from - Start date in 'yyyy-mm-dd' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # + to - End date.
    # + page_size - The number of records returned within a single API call.
    # + page_number - The page number of the current page in the returned records. This field is **not** available if the `query_date_type` parameter is the `meeting_start_time` or `meeting_end_time` value. 
    # This field is deprecated. Use the `next_page_token` query parameter for pagination.
    # + next_page_token - The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Telephone report returned.  
    #
    # This is only available for paid account:{accountId}.  
    #
    # The requested report cannot be generated for this account because this account has not subscribed to toll-free audio conference plan.  
    #
    # Toll Report feature must be enabled to perform this action. Contact the Zoom Support team for help.)
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/telephone(string 'from, string to, string? next_page_token, "1"|"2"|"3" 'type = "1", "start_time"|"end_time"|"meeting_start_time"|"meeting_end_time" query_date_type = "start_time", int page_size = 30, int page_number = 1) returns InlineResponse20041|http:TooManyRequests {
    }

    # Get upcoming events report
    #
    # + 'from - Start date in 'yyyy-mm-dd' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # + to - End date.
    # + page_size - The number of records returned within a single API call.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
    # + 'type - The type of event to query. 
    # * `meeting` &mdash; A meeting event. 
    # * `webinar` &mdash; A webinar event. 
    # * `all` &mdash; Both meeting and webinar events.
    # This value defaults to `all`.
    # + group_id - The group ID. To get a group ID, use the [**List groups**](/api-reference/zoom-api/methods#operation/groups) API. 
    # **Note:** The API response will only contain meetings where the host is a member of the queried group ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Upcoming events report returned.  
    #
    # )
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `200` <br>
    # This is only available for the paid account: {accountId} <br>
    #
    # **Error Code:** `300` <br>
    # The next page token is invalid or expired.
    #
    # **Error Code:** `200` <br>
    # No permission.<br>
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/upcoming_events(string 'from, string to, string? next_page_token, string? group_id, int page_size = 30, "meeting"|"webinar"|"all" 'type = "all") returns InlineResponse20042|http:BadRequest|http:TooManyRequests {
    }

    # Get active or inactive host reports
    #
    # + 'type - Active or inactive hosts.  
    # `active` - Active hosts.   
    # `inactive` - Inactive hosts.
    # + 'from - Start date in 'yyyy-mm-dd' format. The date range defined by the `from` and `to` parameters should only be one month as the report includes only one month worth of data at once.
    # + to - End date.
    # + page_size - The number of records returned within a single API call.
    # + page_number - The page number of the current page in the returned records.
    # + next_page_token - The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # + group_id - The group ID. To get a group ID, use the [**List groups**](/docs/api/rest/reference/user/methods/#operation/groups) API. 
    # **Note:** The API response will only contain users who are members of the queried group ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Active or inactive hosts report returned.  
    #
    # Only available for Paid or ZMP account: {accountId}.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # No permission. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/users("active"|"inactive"? 'type, string 'from, string to, string? next_page_token, string? group_id, int page_size = 30, int page_number = 1) returns InlineResponse20043|http:BadRequest|http:TooManyRequests {
    }

    # Get meeting reports
    #
    # + userId - The user ID or email address of the user. For user-level apps, pass the `me` value.
    # + 'from - Start date in 'yyyy-mm-dd' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
    # + to - End date.
    # + page_size - The number of records returned within a single API call.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
    # + 'type - The meeting type to query for: 
    # * `past` &mdash; All past meetings. 
    # * `pastOne` &mdash; A single past user meeting. 
    # * `pastJoined` &mdash; All past meetings the account's users hosted or joined.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Active or inactive hosts report returned.  
    #
    # )
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `200` <br>
    # This is only available for paid account:{accountId}.<br>
    #
    # **Error Code:** `300` <br>
    # The next page token is invalid or expired.
    #
    # **Error Code:** `200` <br>
    # No permission.<br>
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `1001` <br>
    # User {userId} not exist or not belong to this account.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/users/[UserId userId]/meetings(string 'from, string to, string? next_page_token, int page_size = 30, "past"|"pastOne"|"pastJoined" 'type = "past") returns InlineResponse20044|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get webinar detail reports
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API will return a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Webinar details returned.  
    #
    # This is only available for paid account:{accountId}.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account:{accountId}.<br>
    #
    # **Error Code:** `12702` <br>
    # Can not access a webinar a year ago.<br>
    #
    # **Error Code:** `200` <br>
    # No permission.<br>
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `3001` <br>
    # Meeting  {meetingId} not found or has expired.<br>
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/webinars/[string webinarId]() returns InlineResponse20045|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get webinar participant reports
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API will return a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
    # + page_size - The number of records returned within a single API call.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
    # + include_fields - The additional query parameters to include. 
    # * `registrant_id` - Include the registrant's ID in the API response. The registrant ID is the webinar participant's unique ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` 
    # * Meeting participants report returned.  
    #
    # Only available for Paid or ZMP account: {accountId}.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account: {accountId} <br>
    # **Error Code:** `12702` <br>
    # Can not access a webinar a year ago.<br> <br>
    # **Error Code:** `200` <br>
    # No permission.<br> <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar "{webinarId}" not found or has expired <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/webinars/[string webinarId]/participants(string? next_page_token, "registrant_id"? include_fields, int page_size = 30) returns InlineResponse20046|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get webinar poll reports
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API will return a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Webinar polls report returned.  
    #
    # Missing webinar subscription plan.  
    #
    # Only available for Paid or ZMP account: {accountId}.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account:{accountId}.<br>
    #
    # **Error Code:** `12702` <br>
    # Can not access a webinar a year ago.<br>
    #
    # **Error Code:** `200` <br>
    # No permission.<br>
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `3001` <br>
    # Webinar  {webinarId} not found or has expired.<br>
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/webinars/[string webinarId]/polls() returns InlineResponse20047|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get webinar Q&A report
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API will return a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   Webinar Q&A report returned. Only available for Paid or ZMP account: {accountId}.   A report can't be generated for this account because this account is not subscribed to a webinar plan.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # No permission.<br> <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User does not exist: {userId}.<br> <br>
    # **Error Code:** `3001` <br>
    # Webinar  {webinarId} not found or has expired.<br> <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/webinars/[string webinarId]/qa() returns InlineResponse20048|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get webinar survey report
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID). 
    # * If you provide a webinar ID, the API returns a response for the latest webinar instance. 
    # * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Webinar survey report returned.  
    #
    # Missing webinar subscription plan.  
    #
    # Only available for Paid or ZMP account: {accountId}.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account:{accountId}.<br> <br>
    # **Error Code:** `12702` <br>
    # Can not access a webinar a year ago.<br> <br>
    # **Error Code:** `200` <br>
    # No permission.<br> <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar  {webinarId} not found or has expired.<br> <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get report/webinars/[string webinarId]/survey() returns InlineResponse20049|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List SIP phones
    #
    # + page_number - **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
    # + search_key - A user's user name or email address. If this parameter is provided, only the SIP phone system integration enabled for that specific user will be returned. Otherwise, all SIP phones on an account will be returned.
    # + page_size - The number of records returned within a single API call.
    # + next_page_token - The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # SIP Phones listed successfully.
    #
    # **Error Code:** `200`  
    #
    # Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get sip_phones(string? search_key, int? page_size, string? next_page_token, int page_number = 1) returns InlineResponse20050|http:BadRequest|http:TooManyRequests {
    }

    # List tracking fields
    #
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # List of Tracking Fields returned.)
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get tracking_fields() returns InlineResponse20054|http:TooManyRequests {
    }

    # Get a tracking field
    #
    # + fieldId - The tracking field ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   Tracking field object returned)
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get tracking_fields/[string fieldId]() returns InlineResponse20055|http:NotFound|http:TooManyRequests {
    }

    # Get account's TSP information
    #
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # TSP account detail returned successfully.)
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get tsp() returns InlineResponse20052|http:TooManyRequests {
    }

    # List user's TSP accounts
    #
    # + userId - The user ID or email address of the user. For user-level apps, pass the `me` value.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` **OK**  
    #
    # TSP account list returned successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `2024` <br>
    # Account has not enabled TSP.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `1001` <br>
    # User does not exist: $userId.<br>
    #
    # **Error Code:** `1120` <br>
    # A valid invitation to join the Zoom account was not found for this user.<br>
    # This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get users/[UserId1 userId]/tsp() returns InlineResponse20053|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a user's TSP account
    #
    # + userId - The user ID or email address of the user. For user-level apps, pass the `me` value.
    # + tspId - TSP account ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # TSP account retrieved successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `300` <br>
    # The TSP id provided does not exist.<br>
    #
    # **Error Code:** `300` <br>
    # TSP Config does not exist.<br>
    #
    # **Error Code:** `2024` <br>
    # Account has not enabled TSP.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `1001` <br>
    # User does not exist: $userId.<br>
    #
    # **Error Code:** `1120` <br>
    # A valid invitation to join the Zoom account was not found for this user.<br>
    # This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get users/[UserId3 userId]/tsp/["1"|"2" tspId]() returns TSPAccount|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List meeting templates
    #
    # + userId - The user ID retrievable from the [List users](/api-reference/zoom-api/methods#operation/users) API.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` **OK**   
    # )
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request 
    #
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found 
    #
    # **Error Code:** `1001` <br>
    # User not exist: {userId}.<br>
    # User {userId} does not exist or does not belong to this account. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get users/[string userId]/meeting_templates() returns InlineResponse20025|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List meetings
    #
    # + userId - The user's user ID or email address. For user-level apps, pass the `me` value.
    # + 'type - The type of meeting. 
    # * `scheduled` - All valid previous (unexpired) meetings, live meetings, and upcoming scheduled meetings. 
    # * `live` - All the ongoing meetings. 
    # * `upcoming` - All upcoming meetings, including live meetings. 
    # * `upcoming_meetings` - All upcoming meetings, including live meetings. 
    # * `previous_meetings` - All the previous meetings.
    # + page_size - The number of records returned within a single API call.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
    # + page_number - The page number of the current page in the returned records.
    # + 'from - The start date.
    # + to - The end date.
    # + timezone - The timezone to assign to the `from` and `to` value. For a list of supported timezones and their formats, see our [timezone list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones).
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # List of meeting objects returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request 
    #
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found 
    #
    # **Error Code:** `1001` <br>
    # User {userId} not exist or not belong to this account.<br> <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get users/[string userId]/meetings(string? next_page_token, int? page_number, string? 'from, string? to, string? timezone, "scheduled"|"live"|"upcoming"|"upcoming_meetings"|"previous_meetings" 'type = "scheduled", int page_size = 30) returns InlineResponse20026|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List a user's PAC accounts
    #
    # + userId - The user's user ID or email address. For user-level apps, pass the `me` value.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # PAC account list returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request 
    #
    # **Error Code:** `2024` <br>
    # User does not have PAC enabled. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found 
    #
    # **Error Code:** `1001` <br>
    # User does not exist: $userId <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get users/[string userId]/pac() returns InlineResponse20028|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List all recordings
    #
    # + userId - The user's ID or email address. For user-level apps, pass the `me` value.
    # + page_size - The number of records returned within a single API call.
    # + next_page_token - The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    # + mc - The query metadata of the recording if using an on-premise meeting connector for the meeting.
    # + trash - The query trash.
    # * `true` - List recordings from trash.  
    # * `false` - Do not list recordings from the trash.  
    # The default value is `false`. If you set it to `true`, you can use the `trash_type` property to indicate the type of Cloud recording that you need to retrieve. 
    # + 'from - The start date in 'yyyy-mm-dd' UTC format for the date range where you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date. 
    # For example, if you make the API request on June 30, 2020, without providing the `from` and `to` parameters, by default the value of 'from' field will be `2020-06-30` and the value of the 'to' field will be `2020-07-01`. 
    # **Note**: The `trash` files cannot be filtered by date range and thus, the `from` and `to` fields should not be used for trash files.
    # + to - The end date in 'yyyy-mm-dd' 'yyyy-mm-dd' UTC format. 
    # + trash_type - The type of cloud recording to retrieve from the trash. 
    # *   `meeting_recordings`: List all meeting recordings from the trash.  
    # *  `recording_file`: List all individual recording files from the trash. 
    # + meeting_id - The meeting ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # List of recording objects returned.)
    # http:Unauthorized (**HTTP Status Code:** `401` <br>
    # Unauthorized  
    #
    # **Error Code:** `124` <br>
    # Requires an access token. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User {userId} does not exist, or does not belong to this account. <br>
    # **Error Code:** `3301` <br>
    # There is no recording for this session. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get users/[string userId]/recordings(string? next_page_token, string? 'from, string? to, int? meeting_id, int page_size = 30, string mc = "false", boolean trash = false, string trash_type = "meeting_recordings") returns InlineResponse2006|http:Unauthorized|http:NotFound|http:TooManyRequests {
    }

    # List upcoming meetings
    #
    # + userId - The user's user ID or email address. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword).
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` List of upcoming meeting objects returned.)
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get users/[string userId]/upcoming_meetings() returns InlineResponse20027|http:TooManyRequests {
    }

    # List webinar templates
    #
    # + userId - The user's ID. To get a user's ID, use the [**List users**](/docs/api-reference/zoom-api/ma#operation/users) API. For user-level apps, pass the `me` value instead of the user ID value.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` **OK**  List of existing templates returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `300` <br>
    # You can only create up to 40 webinar templates. <br>
    # **Error Code:** `3000` <br>
    # Webinar template name already exists {name}. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User does not exist: {userId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests  For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get users/[string userId]/webinar_templates() returns InlineResponse20059|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List webinars
    #
    # + userId - The user's user ID or email address. For user-level apps, pass the `me` value.
    # + 'type - The type of webinar. 
    # * `scheduled` - All valid previous (unexpired) webinars, live webinars, and upcoming scheduled webinars. 
    # * `upcoming` - All upcoming webinars, including live webinars.
    # + page_size - The number of records returned within a single API call.
    # + page_number - **Deprecated** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # List of webinar objects returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User does not exist: {userId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests  For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get users/[string userId]/webinars("scheduled"|"upcoming" 'type = "scheduled", int page_size = 30, int page_number = 1) returns InlineResponse20060|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get webinar's session branding
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Webinar session branding returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `3000` <br>
    # You cannot enable session branding for this webinar. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get webinars/[int webinarId]/branding() returns InlineResponse20062|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a webinar's join token for live streaming
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Webinar live streaming token returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `124` <br>
    # This API only supports OAuth2 authorization. <br>
    # **Error Code:** `3000` <br>
    # Not allowed to start live streaming. To use this feature, enable the **Allow livestreaming of webinars** setting in the **Settings** page of the Zoom web portal. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests  For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get webinars/[int webinarId]/jointoken/live_streaming() returns InlineResponse20063|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a webinar's archive token for local archiving
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Webinar local archiving token returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `124` <br>
    # This API only supports OAuth2 authorization. <br>
    # **Error Code:** `3000` <br>
    # Not allowed to start local archiving. To use this feature, enable the **Archive meetings and webinars** setting in the **Settings** page of the Zoom web portal. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests  For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get webinars/[int webinarId]/jointoken/local_archiving() returns InlineResponse20064|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a webinar's join token for local recording
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Webinar local recording token returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `124` <br>
    # This API only supports OAuth2 authorization. <br>
    # **Error Code:** `3000` <br>
    # Not allowed to start local recording. To use this feature, enable the **Local Recording** setting in the **Settings** page of the Zoom web portal. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get webinars/[int webinarId]/jointoken/local_recording() returns InlineResponse20065|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List panelists
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Webinar plan subscription missing. Enable webinar for this user once the subscription is added.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get webinars/[int webinarId]/panelists() returns InlineResponse20067|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List a webinar's polls 
    #
    # + webinarId - The webinar's ID.
    # + anonymous - Whether to query for polls with the **Anonymous** option enabled: 
    # * `true` &mdash; Query for polls with the **Anonymous** option enabled. 
    # * `false` &mdash; Do not query for polls with the **Anonymous** option enabled.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # List polls of a Webinar  returned)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `4400` <br>
    # Webinar polls disabled. To enable this feature, enable the **Webinar Polls/Quizzes** setting in the Zoom web portal's **Settings** interface. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get webinars/[int webinarId]/polls(boolean? anonymous) returns PollList1|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a webinar poll
    #
    # + webinarId - The webinar's ID.
    # + pollId - The poll ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Webinar Poll object returned)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `4400` <br>
    # Webinar polls disabled. To enable this feature, enable the **Webinar Polls/Quizzes** setting in the Zoom web portal's **Settings** interface. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get webinars/[int webinarId]/polls/[string pollId]() returns InlineResponse20068|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List webinar registrants
    #
    # + webinarId - The webinar's ID.
    # + occurrence_id - The meeting or webinar occurrence ID.
    # + status - Query by the registrant's status. 
    # * `pending` - The registration is pending. 
    # * `approved` - The registrant is approved. 
    # * `denied` - The registration is denied.
    # + tracking_source_id - The tracking source ID for the registrants. Useful if you share the webinar registration page in multiple locations. See [Creating source tracking links for webinar registration](https://support.zoom.us/hc/en-us/articles/360000315683-Creating-source-tracking-links-for-webinar-registration) for details.
    # + page_size - The number of records returned within a single API call.
    # + page_number - **Deprecated** This field will be deprecated. We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
    # + next_page_token - Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token's expiration period is 15 minutes.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Webinar plan subscription is missing. Enable webinar for this user once the subscription is added:{userId}.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get webinars/[int webinarId]/registrants(string? occurrence_id, string? tracking_source_id, string? next_page_token, "pending"|"approved"|"denied" status = "approved", int page_size = 30, int page_number = 1) returns RegistrationList2|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a webinar registrant
    #
    # + webinarId - The webinar's ID.
    # + registrantId - The registrant ID.
    # + occurrence_id - The meeting or webinar occurrence ID.
    # + return - returns can be any of following types 
    # http:Ok (Success.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # **Error Code:** `3000` <br>
    # Registration has not been enabled for this webinar: {webinarId}. <br>
    # **Error Code:** `3079` <br>
    # This registrant does not exist: {registrantId}. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests  For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get webinars/[int webinarId]/registrants/[string registrantId](string? occurrence_id) returns WebinarRegistrant|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # List registration questions
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   Webinar registrant question object returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # **Error Code:** `3000` <br>
    # Registration has not been enabled for this webinar: {webinarId}. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests  For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get webinars/[int webinarId]/registrants/questions() returns InlineResponse20069|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a webinar survey
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Webinar survey object returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `3000` <br>
    # Webinar survey disabled. To enable this feature, enable the **Webinar Survey** setting in the Zoom web portal's **Settings** interface. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get webinars/[int webinarId]/survey() returns WebinarSurveyObject|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get webinar's token
    #
    # + webinarId - The webinar's ID.
    # + 'type - The webinar token type: 
    # * `closed_caption_token` &mdash; The third-party closed caption API token. 
    # This defaults to `closed_caption_token`.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Webinar token returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `3000` <br>
    # Closed captioning disabled. To enable this feature, enable the **Closed captioning** and **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** settings in the Zoom web portal's **Settings** interface. <br>
    # **Error Code:** `3000` <br>
    # Webinar {webinarId} has not started. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get webinars/[int webinarId]/token("closed_caption_token" 'type = "closed_caption_token") returns InlineResponse20070|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get webinar tracking sources
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get webinars/[int webinarId]/tracking_sources() returns InlineResponse20071|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a webinar
    #
    # + webinarId - The webinar's ID or universally unique ID (UUID).
    # + occurrence_id - Unique identifier for an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [**Create a webinar**](/docs/api-reference/zoom-api/methods#operation/webinarCreate) API, you can retrieve the Occurrence ID from the response of the API call.
    # + show_previous_occurrences - Set the value of this field to `true` if you would like to view Webinar details of all previous occurrences of a recurring Webinar.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`  
    #
    # Success)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user to perform this action. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get webinars/[string webinarId](string? occurrence_id, boolean? show_previous_occurrences) returns InlineResponse20061|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get live stream details
    #
    # + webinarId - The webinar's unique ID.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200` **OK**   Live stream details returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # The current user has not enabled the custom live streaming feature of the webinar. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests  For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function get webinars/[string webinarId]/livestream() returns InlineResponse20066|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update an archived file's auto-delete status
    #
    # + fileId - Archived file ID.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204` <br>
    # auto-delete status updated  
    #
    # )
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch archive_files/[string fileId](@http:Payload ArchiveFilesfileIdBody payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Change device 
    #
    # + deviceId - Unique identifier of the device.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204` **No Content** 
    #
    # Request processed successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request 
    #
    # **Error Code:** `30055001` <br>
    # zoom room does not exist. . <br>
    # **Error Code:** `30055002` <br>
    # required param can not be empty or null. <br>
    # **Error Code:** `30055003` <br>
    # device type does not support. <br>
    # **Error Code:** `30055011` <br>
    # device is not enrolled. <br>
    # **Error Code:** `30055013` <br>
    # device not support this app. <br>
    # **Error Code:** `30055014` <br>
    # room not support this app. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found 
    #
    # **Error Code:** `30055012` <br>
    # Device does not exist: {deviceId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch devices/[string deviceId](@http:Payload DevicesdeviceIdBody payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Change device association
    #
    # + deviceId - The device's unique identifier.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204` **No Content**  
    #
    # Request processed successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `8500` <br>
    # Device not enrolled in Zoom Device Management. <br>
    # **Error Code:** `8501` <br>
    # Device does not support this app. <br>
    # **Error Code:** `8502` <br>
    # Room does not support this app. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1012` <br>
    # Room does not exist: {roomId}. <br>
    # **Error Code:** `8503` <br>
    # Device does not exist: {deviceId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch devices/[string deviceId]/assignment(@http:Payload DeviceIdAssignmentBody payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update a H.323/SIP device
    #
    # + deviceId - The device ID.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`  
    #
    # H.323/SIP device updated.)
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `2020` <br>
    # H.323 device's display name:{displayName} is already in use.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch h323/devices/[string deviceId](@http:Payload TheH323SIPDeviceObject1 payload) returns http:NoContent|http:NotFound|http:TooManyRequests {
    }

    # Update a live meeting message
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, store it as a long-format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + messageId - The live meeting chat message's unique identifier (UUID), in base64-encoded format.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204` <br>
    # Meeting chat message updated.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # DLP is not enabled on this account. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Meeting {meetingId} does not exist. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch live_meetings/[int meetingId]/chat/messages/[string messageId](@http:Payload MessagesmessageIdBody payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Use in-meeting controls
    #
    # + meetingId - The live meeting's ID.
    # + return - returns can be any of following types 
    # http:Accepted (**HTTP Status:** `202` **Accepted**
    # Request processed successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # * Meeting id does not exist.<br>
    # * Invalid meeting id.<br>
    # * Meeting does not exist.<br>
    # * No permission.<br>
    # * This API is not available for this account, please contact Zoom support. <br>
    # **Error Code:** `3309` <br>
    # Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Meeting {meetingId} is not found or has expired. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch live_meetings/[string meetingId]/events(@http:Payload MeetingIdEventsBody payload) returns http:Accepted|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update a meeting
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be greater than 10 digits.
    # + occurrence_id - Meeting occurrence ID. Support change of agenda, `start_time`, duration, or settings {`host_video`, `participant_video`, `join_before_host`, `mute_upon_entry`, `waiting_room`, `watermark`, `auto_recording`}.
    # + payload - Meeting 
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`  
    #
    # Meeting updated.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `3161` <br>
    # Your user account is not allowed meeting hosting and scheduling capabilities. <br>
    # **Error Code:** `300` <br>
    # The value that you entered in the `schedule_for` field is invalid. Enter a valid value and try again. <br>
    # **Error Code:** `300` <br>
    # Invalid `enforce_login_domains`. Separate multiple domains with semicolons. <br>
    # **Error Code:** `3000` <br>
    # Cannot access webinar info. <br>
    # **Error Code:** `3000` <br>
    # Instant meetings do not support the `schedule_for` parameter, and you can't schedule an instant meeting for another user. <br>
    # **Error Code:** `3000` <br>
    # Users in '{userId}' have been blocked from joining meetings and webinars. To unblock them, go to the **Settings** page in the Zoom web portal and update **Block users in specific domains from joining meetings and webinars**. <br>
    # **Error Code:** `3000` <br>
    # You cannot schedule a meeting for {userId} <br>
    # **Error Code:** `3000` <br>
    # Prescheduling is only available for scheduled meetings (type 2) and recurring meetings with no fixed time (type 3). <br>
    # **Error Code:** `3000` <br>
    # Unable to schedule for a user outside of your account for a meeting with continuous chat. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {meetingId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch meetings/[int meetingId](string? occurrence_id, @http:Payload MeetingsmeetingIdBody payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update a livestream
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + payload - Meeting 
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`  
    #
    # Meeting livestream updated.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account: {accountId}.<br>
    #
    # **Error Code:** `3000` <br>
    # Cannot access webinar info.
    #
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `1001` <br>
    # User {userId} does not exist.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch meetings/[int meetingId]/livestream(@http:Payload MeetingIdLivestreamBody payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update livestream status
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + payload - Meeting 
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204` <br> Meeting livestream updated.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `3000` <br>
    # Cannot access webinar info. <br>
    # **Error Code:** `3161` <br>
    # Your user account is not allowed meeting hosting and scheduling capabilities. <br>
    # **Error Code:** `4400` <br>
    # End-to-end encrypted meetings currently do not support the livestreaming feature. <br>
    # **Error Code:** `300` <br>
    # Invalid meeting ID. <br>
    # **Error Code:** `4927` <br>
    # Meeting {meetingId} has not started. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {meetingId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch meetings/[int meetingId]/livestream/status(@http:Payload LivestreamStatusBody payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update registration questions
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + payload - Meeting Registrant Questions 
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`  
    #
    # Meeting Registrant Questions Updated)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch meetings/[int meetingId]/registrants/questions(@http:Payload RegistrantsQuestionsBody1 payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update a meeting survey
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be over 10 digits.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   
    #
    # Meeting survey updated.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request 
    #
    # **Error Code:** `300` <br>
    # Invalid meeting ID. <br>
    # **Error Code:** `300` <br>
    # Invalid third party survey: {third_party_survey}. <br>
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # **Error Code:** `3000` <br>
    # Cannot access Webinar information. <br>
    # **Error Code:** `3000` <br>
    # Meeting survey disabled. To enable this feature, enable the "Meeting Survey" setting in the Zoom web portal's "Settings" interface. <br>
    # **Error Code:** `3000` <br>
    # Not allowed host to use a 3rd-party survey link. To use this feature, enable the "Allow host to use a 3rd-party survey link" setting in the "Account Settings" page of the Zoom web portal. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found 
    #
    # **Error Code:** `300` <br>
    # Meeting ID does not exist. <br>
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {meetingId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch meetings/[int meetingId]/survey(@http:Payload MeetingSurveyObject1 payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update registration questions
    #
    # + meetingId - To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance. 
    # To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request. 
    # + payload - Recording registrant questions. 
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `200`  
    #
    # Recording registrant questions updated)
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch meetings/[string meetingId]/recordings/registrants/questions(@http:Payload RegistrantsQuestionsBody payload) returns http:NoContent|http:NotFound|http:TooManyRequests {
    }

    # Update meeting recording settings
    #
    # + meetingId - To get cloud recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response is for the latest meeting instance. 
    # To get cloud recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response is for the latest webinar instance. 
    # If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **double encode** the UUID before making an API request. 
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`    Meeting recording setting's updated.)
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch meetings/[string meetingId]/recordings/settings(@http:Payload RecordingSettings1 payload) returns http:NoContent|http:NotFound|http:TooManyRequests {
    }

    # Update SIP phone
    #
    # + phoneId - The SIP phone ID. This can be retrieved from the List SIP phones API.
    # + return - returns can be any of following types 
    # http:NoContent (**Status Code:** `204` SIP phone updated.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch sip_phones/[string phoneId](@http:Payload SipPhonesphoneIdBody payload) returns http:NoContent|http:BadRequest|http:TooManyRequests {
    }

    # Update a tracking field
    #
    # + fieldId - The tracking field ID.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   Tracking field updated)
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch tracking_fields/[string fieldId](@http:Payload TrackingField1 payload) returns http:NoContent|http:NotFound|http:TooManyRequests {
    }

    # Update account's TSP information
    #
    # + payload - TSP Account 
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204` **No Content**  
    #
    # TSP Account updated.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `300` <br>
    # Invalid parameter: tsp_bridge.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch tsp(@http:Payload TspBody payload) returns http:NoContent|http:BadRequest|http:TooManyRequests {
    }

    # Update a TSP account
    #
    # + userId - The user ID or email address of the user. For user-level apps, pass the `me` value.
    # + tspId - TSP account ID.
    # + payload - TSP account. 
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:**`204` **No Content**  
    #
    # TSP account updated.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `2024` <br>
    # Account has not enabled TSP.<br>
    #
    # **Error Code:** `300` <br>
    # The TSP id provided does not exist.<br>
    #
    # **Error Code:** `300` <br>
    # TSP Config does not exist.<br>
    #
    # **Error Code:** `300` <br>
    # At least one tsp config must be available.<br>
    #
    # **Error Code:** `300` <br>
    # Media link is required for AT&T TSP accounts.
    #
    # **Error Code:** `300` <br>
    # Invalid parameter: tsp_bridge.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `1001` <br>
    # User does not exist: $userId.<br>
    #
    # **Error Code:** `1120` <br>
    # A valid invitation to join the Zoom account was not found for this user.<br>
    # This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch users/[UserId5 userId]/tsp/["1"|"2" tspId](@http:Payload TSPAccount1 payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Set global dial-in URL for a TSP user
    #
    # + userId - The userId or email address of the user.
    # + payload - Global dial-in URL of the user. 
    # + return - returns can be any of following types 
    # http:NoContent (**Status Code:** `204` **No Content**   
    #
    # URL set successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `2000` <br>
    # Not TSP special account.<br>
    #
    # Ths error means that the account does not have special TSP privilege. Contact Zoom Developer Support for details.<br>
    #
    # **Error Code:** `2024` <br>
    # Account not enable TSP
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `1001` <br>
    # User {userId} not exist or not belong to this account.
    #
    # **Error Code:** `1120` <br>
    # Invite not exist.
    #
    # This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch users/[string userId]/tsp/settings(@http:Payload TSPGlobalDialInURLSetting payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update a webinar
    #
    # + webinarId - The webinar's ID.
    # + occurrence_id - Webinar occurrence ID. Support change of agenda, start time, duration, and settings `host_video`, `panelist_video`, `hd_video, watermark`, `auto_recording`.
    # + payload - Webinar. 
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`  
    #
    # Webinar updated.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `3003` <br>
    # Users in **{domains}** have been blocked from joining meetings and webinars. To unblock them, go to the **Settings** page in the Zoom web portal and update the **Block users in specific domains from joining meetings and webinars** setting. <br>
    # **Error Code:** `3000` <br>
    # You cannot update or delete simulive webinars that have started using this method. <br>
    # **Error Code:** `300` <br>
    # The value that you entered for the `schedule_for` field is invalid. Enter a valid value and try again. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch webinars/[int webinarId](string? occurrence_id, @http:Payload WebinarswebinarIdBody payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update a webinar's branding name tag
    #
    # + webinarId - The webinar's ID.
    # + nameTagId - The name tag's ID.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   
    #
    # * No content. 
    # * Name tag updated.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `3000` <br>
    # This webinar does not have session branding enabled. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # **Error Code:** `300` <br>
    # Name Tag does not exist. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch webinars/[int webinarId]/branding/name_tags/[string nameTagId](@http:Payload NameTagsnameTagIdBody payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Set webinar's default branding virtual background
    #
    # + webinarId - The webinar's ID.
    # + id - The virtual background file ID to update.
    # + set_default_for_all_panelists - Whether to set the virtual background file as the new default for all panelists. This includes panelists not currently assigned a default virtual background.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`    * No content. * Virtual background updated.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid parameter: {id} <br>
    # **Error Code:** `3000` <br>
    # This webinar does not have session branding enabled. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch webinars/[int webinarId]/branding/virtual_backgrounds(string? id, boolean? set_default_for_all_panelists) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update a live stream
    #
    # + webinarId - The webinar's ID.
    # + payload - Webinar 
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`  
    #
    # Meeting live stream updated.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # The current user has not enabled the custom live streaming feature of the webinar. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch webinars/[int webinarId]/livestream(@http:Payload WebinarIdLivestreamBody payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update live stream status
    #
    # + webinarId - The webinar's ID.
    # + payload - Webinar 
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   
    #
    # Meeting live stream updated.
    #
    # )
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `1001` <br>
    # User does not exist: {userId}. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `3000` <br>
    # The current webinar is not configured with a custom streaming service. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # **Error Code:** `200` <br>
    # Webinar {webinarId} has not started. <br>
    # **Error Code:** `3000` <br>
    # The current webinar is not configured with a custom streaming service. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch webinars/[int webinarId]/livestream/status(@http:Payload LivestreamStatusBody1 payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update registration questions
    #
    # + webinarId - The webinar's ID.
    # + payload - Webinar registrant questions 
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   Webinar registrant questions updated.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # **Error Code:** `3000` <br>
    # Registration has not been enabled for this webinar: {webinarId}. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch webinars/[int webinarId]/registrants/questions(@http:Payload RegistrantsQuestionsBody2 payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update a webinar survey
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   
    #
    # Webinar survey updated.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `300` <br>
    # Invalid third party survey: {third_party_survey}. <br>
    # **Error Code:** `3000` <br>
    # Webinar survey disabled. To use this feature, enable the **Webinar Survey** setting in the Zoom web portal's **Settings** interface. <br>
    # **Error Code:** `3000` <br>
    # The host isn't allowed to use a third party survey link. To use this feature, enable the "Allow host to use a 3rd-party survey link" setting in the "Account Settings" page of the Zoom web portal. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function patch webinars/[int webinarId]/survey(@http:Payload WebinarIdSurveyBody payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Add a new device
    #
    # + return - returns can be any of following types 
    # http:Accepted (**HTTP Status:** `202` **Accepted**
    # Request processed successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request 
    #
    # **Error Code:** `30055001` <br>
    # zoom room does not exist.  <br>
    # **Error Code:** `30055002` <br>
    # required param can not be empty or null. <br>
    # **Error Code:** `30055003` <br>
    # device type does not support. <br>
    # **Error Code:** `30055004` <br>
    # model or vendor not exist. <br>
    # **Error Code:** `30055005` <br>
    # tag length can not be more than 64. <br>
    # **Error Code:** `30055006` <br>
    # device has already exist. <br>
    # **Error Code:** `30055007` <br>
    # invalid mac address. <br>
    # **Error Code:** `30055008` <br>
    # no permission. <br>
    # **Error Code:** `30055009` <br>
    # email does not have plan. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post devices(@http:Payload DevicesBody payload) returns http:Accepted|http:BadRequest|http:TooManyRequests {
    }

    # Assign a device to a user or commonarea
    #
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204` **No Content**   Request processed successfully.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `30055003` <br>
    # Device vendor does not support. <br>
    # **Error Code:** `30055007` <br>
    # Mac address is wrong. <br>
    # **Error Code:** `30051039` <br>
    # Device not exists. <br>
    # **Error Code:** `30055002` <br>
    # AUTO RECEPTIONIST user can not assign to device. <br>
    # **Error Code:** `30055009` <br>
    # User not have phone plan. <br>
    # **Error Code:** `30052024` <br>
    # Extension number not exists. <br>
    # **Error Code:** `30055002` <br>
    # Missing required input. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post devices/zpa/assignment(@http:Payload ZpaAssignmentBody payload) returns http:NoContent|http:BadRequest|http:TooManyRequests {
    }

    # upgrade zpa os/app
    #
    # + return - returns can be any of following types 
    # http:Accepted (The upgrade request has been accepted and is currently being processed.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `30052029` <br>
    # Missing required input: firmware_versions. <br>
    # **Error Code:** `30055020` <br>
    # Upgrade type dose not exist. <br>
    # **Error Code:** `30055018` <br>
    # Zdm group id dose not exist. <br>
    # **Error Code:** `30052030` <br>
    # Missing required input: app_version. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post devices/zpa/upgrade(@http:Payload ZpaUpgradeBody payload) returns http:Accepted|http:BadRequest|http:TooManyRequests {
    }

    # Create a H.323/SIP device
    #
    # + payload - H.323/SIP device. 
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`  
    #
    # H.323/SIP device created.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `200` <br>
    # No permission.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `2020` <br>
    # H.323 device's display name:{displayName} is already in use.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post h323/devices(@http:Payload TheH323SIPDeviceObject payload) returns InlineResponse2011|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Create meeting's invite links
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`   
    #
    # Meeting invitation links created.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `300` <br>
    # * Meeting ID does not exist. 
    # * Invalid meeting ID.
    #
    # **Error Code:** `3000` <br>
    # Cannot access webinar information.
    #
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {meetingId}
    #
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post meetings/[int meetingId]/invite_links(@http:Payload MeetingIdInviteLinksBody payload) returns InlineResponse2014|http:BadRequest|http:TooManyRequests {
    }

    # Add a meeting app
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201` App added.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid meeting ID. <br>
    # **Error Code:** `3000` <br>
    # You can only add up to 3 apps. <br>
    # **Error Code:** `3000` <br>
    # Meeting {meetingId} has started. <br>
    # **Error Code:** `3000` <br>
    # Zoom Apps disabled. To use this feature, enable the 'Zoom Apps Quick Launch Button' setting in the 'Settings' page of the Zoom web portal. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {meetingId} <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post meetings/[int meetingId]/open_apps() returns InlineResponse2015|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Create a meeting poll
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + payload - The meeting poll object. 
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`   
    #
    # Meeting Poll Created)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `4400` <br>
    # * Meeting polls disabled. To enable this feature, enable the "Meeting Polls/Quizzes" setting in the Zoom web portal's "Settings" interface. 
    # * Advanced meeting polls disabled. To enable this feature, enable the "Allow host to create advanced polls and quizzes" setting in the Zoom web portal's "Settings" interface. <br>
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `404` <br>
    # Meeting not found <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post meetings/[int meetingId]/polls(@http:Payload MeetingIdPollsBody payload) returns InlineResponse2016|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Create a recording registrant
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`   
    #
    # Registration submitted.)
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post meetings/[int meetingId]/recordings/registrants(@http:Payload RecordingsRegistrantsBody payload) returns InlineResponse201|http:NotFound|http:TooManyRequests {
    }

    # Add a meeting registrant
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + occurrence_ids - A comma-separated list of meeting occurrence IDs. You can get this value with the [Get a meeting](/docs/api-reference/zoom-api/methods#operation/meeting) API.
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`   
    #
    # Meeting registration created.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account: {accountId}
    #
    # **Error Code:** `3003` <br>
    # You are not the meeting host.
    #
    # **Error Code:** `3043` <br>
    # Meeting has reached maximum attendee capacity.
    #
    # **Error Code:** `3000` <br>
    # Cannot access meeting info.
    #
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `1001` <br>
    # Meeting host does not exist: {userId}
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post meetings/[int meetingId]/registrants(string? occurrence_ids, @http:Payload MeetingIdRegistrantsBody payload) returns InlineResponse2017|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a meeting SIP URI with Passcode
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Meeting's encoded SIP URI returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid meeting ID. <br>
    # **Error Code:** `3000` <br>
    # The meeting's SIP URI does not exist: {meetingId}. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `300` <br>
    # Meeting ID does not exist. <br>
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {meetingId} <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post meetings/[int meetingId]/sip_dialing(@http:Payload MeetingIdSipDialingBody payload) returns InlineResponse20019Ok|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Perform batch poll creation
    #
    # + payload - The batch meeting poll object 
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`   
    #
    # Meeting Poll Created)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid Meeting ID. <br>
    # **Error Code:** `300` <br>
    # Meeting id does not exist. <br>
    # **Error Code:** `3000` <br>
    # Cannot access meeting information. <br>
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {meetingId}.<br> <br>
    # **Error Code:** `4400` <br>
    # * You can only add a maximum of 50 polls. 
    # * Meeting polls disabled. To enable this feature, enable the "Meeting Polls/Quizzes" setting in the Zoom web portal's "Settings" interface. 
    # * Advanced meeting polls disabled. To enable this feature, enable the "Allow host to create advanced polls and quizzes" setting in the Zoom web portal's "Settings" interface. <br>
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post meetings/[string meetingId]/batch_polls(@http:Payload MeetingIdBatchPollsBody payload) returns InlineResponse2012|http:BadRequest|http:TooManyRequests {
    }

    # Perform batch registration
    #
    # + meetingId - Unique identifier of the meeting (Meeting Number).
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `200` **OK**   
    #
    # Registrants added.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `3038` <br>
    # Meeting is over, you can not register now. If you have any questions, please contact the Meeting host.<br><br>
    #
    # **Error Code:** `303` <br>
    # This API can only be used for scheduled meeting(meeting type: 2). Batch registration is not supported for other meeting types.
    #
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {meetingId}.<br>
    #
    # **Error Code:** `3043` <br>
    # Meeting has reached maximum attendee capacity.<br>
    #
    # **Error Code:** `404` <br>
    # Registration has not been enabled for this meeting: {meetingId}.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post meetings/[string meetingId]/batch_registrants(@http:Payload MeetingIdBatchRegistrantsBody payload) returns InlineResponse2013|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Enable SIP phone
    #
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`  
    #
    # SIP Phone Created.
    # )
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.<br> <br>
    # **Error Code:** `300` <br>
    # SIP Phone with the same email already exists. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User {userId} not exist or not belong to this account. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post sip_phones(@http:Payload SipPhonesBody payload) returns InlineResponse20110|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Create a tracking field
    #
    # + payload - Tracking Field 
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`  
    #
    # Tracking Field created)
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post tracking_fields(@http:Payload TrackingField payload) returns InlineResponse20112|http:TooManyRequests {
    }

    # Add a user's TSP account
    #
    # + userId - The user ID or email address of the user. For user-level apps, pass the `me` value.
    # + payload - TSP account. 
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`  
    #
    # TSP account added.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `2024` <br>
    # Account has not enabled TSP.<br>
    #
    # **Error Code:** `300` <br>
    # Media link is required for AT&T TSP accounts.<br>
    #
    # **Error Code:** `300` <br>
    # You can add a max of two tsp configs.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `1001` <br>
    # User does not exist: $userId.<br>
    #
    # **Error Code:** `1120` <br>
    # A valid invitation to join the Zoom account was not found for this user.<br>
    # This error is thrown if you added a user in your account but the user did not accept the invitation on time and the invitation expired - thus making the userId invalid.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post users/[UserId2 userId]/tsp(@http:Payload TSPAccountsList payload) returns InlineResponse20111|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Create a meeting template from an existing meeting
    #
    # + userId - The user ID retrievable from the [List users](/docs/api/rest/reference/user/methods/#operation/users) API.
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`  
    #
    # Meeting template created.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # You can only create up to 40 meeting templates. <br>
    # **Error Code:** `3001` <br>
    # Meeting does not exist: {meetingId} <br>
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # **Error Code:** `3000` <br>
    # Cannot access webinar information. <br>
    # **Error Code:** `3000` <br>
    # Meeting template name already exists: {templateName}. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User does not exist. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post users/[string userId]/meeting_templates(@http:Payload UserIdMeetingTemplatesBody payload) returns InlineResponse2018|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Create a meeting
    #
    # + userId - The user's user ID or email address. For user-level apps, pass the `me` value.
    # + payload - Meeting object. 
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`  
    #
    # Meeting created.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `3161` <br>
    # Your user account is not allowed meeting hosting and scheduling capabilities. <br>
    # **Error Code:** `3000` <br>
    # Instant meetings do not support the `schedule_for` parameter, and you can't schedule an instant meeting for another user. <br>
    # **Error Code:** `3000` <br>
    # Users in '{userId}' have been blocked from joining meetings and webinars. To unblock them, go to the **Settings** page in the Zoom web portal and update **Block users in specific domains from joining meetings and webinars**. <br>
    # **Error Code:** `3000` <br>
    # You cannot schedule a meeting for {userId} <br>
    # **Error Code:** `300` <br>
    # The value that you entered in the `schedule_for` field is invalid. Enter a valid value and try again. <br>
    # **Error Code:** `300` <br>
    # Invalid `enforce_login_domains`. Separate multiple domains with semicolons. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User does not exist: {userId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post users/[string userId]/meetings(@http:Payload UserIdMeetingsBody payload) returns InlineResponse2019|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Create a webinar template
    #
    # + userId - The user ID retrievable from the [List users](/api-reference/zoom-api/methods#operation/users) API.
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`  
    #
    # Webinar template created.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # **Error Code:** `300` <br>
    # You can only create up to 40 webinar templates. <br>
    # **Error Code:** `3000` <br>
    # Cannot access meeting info. <br>
    # **Error Code:** `3000` <br>
    # Webinar template name already exists: {templateName}. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User does not exist: {userId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post users/[string userId]/webinar_templates(@http:Payload UserIdWebinarTemplatesBody payload) returns InlineResponse20113|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Create a webinar
    #
    # + userId - The user ID or email address of the user. For user-level apps, pass the `me` value.
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`  
    #
    # Webinar created.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action: {userId}. <br>
    # **Error Code:** `300` <br>
    # The value that you entered for the schedule_for field is invalid. Enter a valid value and try again. <br>
    # **Error Code:** `300` <br>
    # Can not schedule simulive webinar for others. <br>
    # **Error Code:** `300` <br>
    # Account hasn't enabled Simulive Webinar. <br>
    # **Error Code:** `300` <br>
    # Record file does not exist. <br>
    # **Error Code:** `3000` <br>
    # You cannot schedule a meeting for {userId}. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User does not exist: {userId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post users/[string userId]/webinars(@http:Payload UserIdWebinarsBody payload) returns InlineResponse20114|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Create a webinar's branding name tag
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`   
    #
    # Name tag created.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # **Error Code:** `3000` <br>
    # This webinar does not have session branding enabled. <br>
    # **Error Code:** `3000` <br>
    # You have reached the limit for the number of name tags you can add for this webinar. The limit is 20. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post webinars/[int webinarId]/branding/name_tags(@http:Payload BrandingNameTagsBody payload) returns InlineResponse20116|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Upload a webinar's branding virtual background
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`    Virtual background uploaded.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `3000` <br>
    # This webinar does not have session branding enabled. <br>
    # **Error Code:** `120` <br>
    # You may only upload JPG/JPEG, GIF, or PNG image files. <br>
    # **Error Code:** `120` <br>
    # No file uploaded. Verify that a file has been uploaded. <br>
    # **Error Code:** `120` <br>
    # File size cannot exceed 15M. <br>
    # **Error Code:** `120` <br>
    # A maximum of 10 files are allowed for a webinar. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post webinars/[int webinarId]/branding/virtual_backgrounds(http:Request request) returns InlineResponse20117|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Upload a webinar's branding wallpaper
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`   
    #
    # Webinar wallpaper uploaded.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `3000` <br>
    # This webinar does not have session branding enabled. <br>
    # **Error Code:** `120` <br>
    # No file uploaded. Verify that a file has been uploaded. <br>
    # **Error Code:** `120` <br>
    # File size cannot exceed 15M. <br>
    # **Error Code:** `120` <br>
    # You can only upload JPG/JPEG, GIF, or PNG image files. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post webinars/[int webinarId]/branding/wallpaper(http:Request request) returns InlineResponse20118|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Create webinar's invite links
    #
    # + webinarId - The webinar's ID.
    # + payload - Webinar invite link object. 
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`   
    #
    # Webinar Invite Links Created)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid Webinar Id. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post webinars/[int webinarId]/invite_links(@http:Payload WebinarIdInviteLinksBody payload) returns InlineResponse2014|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Add panelists
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`  
    #
    # Panelist created.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `3000` <br>
    # You have reached the limit for the number of panelists you can add. Contact Zoom Support for more information. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post webinars/[int webinarId]/panelists(@http:Payload WebinarIdPanelistsBody payload) returns InlineResponse20119|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Create a webinar's poll
    #
    # + webinarId - The webinar's ID.
    # + payload - The Webinar poll object. 
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`  
    #
    # Webinar Poll Created)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `4400` <br>
    # Webinar polls disabled. To enable this feature, enable the **Webinar Polls/Quizzes** setting in the Zoom web portal's **Settings** interface. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post webinars/[int webinarId]/polls(@http:Payload WebinarIdPollsBody payload) returns InlineResponse20120|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Add a webinar registrant
    #
    # + webinarId - The webinar's ID.
    # + occurrence_ids - A comma-separated list of webinar occurrence IDs. Get this value with the [Get a webinar](/docs/api/rest/reference/zoom-api/methods/#operation/webinar) API. Make sure the `registration_type` is 3 if updating multiple occurrences with this API.
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`   
    #
    # Webinar registration created.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `3000` <br>
    # This webinar does not have registration as required: {webinarId}. <br>
    # **Error Code:** `3027` <br>
    # Host cannot register. <br>
    # **Error Code:** `3034` <br>
    # If you have been invited, please input your work email address. <br>
    # **Error Code:** `3038` <br>
    # Webinar is over, you cannot register now. If you have any questions, contact the webinar host. <br>
    # **Error Code:** `3000` <br>
    # You have reached the limit for the number of attendees you can add. Contact Zoom Support for more information. <br>
    # **Error Code:** `3000` <br>
    # The Zoom REST API does not support paid registration. <br>
    # **Error Code:** `3000` <br>
    # You have been invited as a panelist for the webinar, please check your email to find more information about this webinar. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post webinars/[int webinarId]/registrants(string? occurrence_ids, @http:Payload WebinarIdRegistrantsBody payload) returns InlineResponse20121|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Get a webinar SIP URI with passcode
    #
    # + webinarId - The webinar's ID. 
    # When storing this value in your database, store it as a long format integer and **not** an integer. Webinar IDs can exceed 10 digits.
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `201`  Webinar's encoded SIP URI returned.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `3000` <br>
    # Cannot access meeting information. <br>
    # **Error Code:** `3000` <br>
    # The webinar's SIP URI does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post webinars/[int webinarId]/sip_dialing(@http:Payload WebinarIdSipDialingBody payload) returns InlineResponse20122|http:BadRequest|http:TooManyRequests {
    }

    # Perform batch registration
    #
    # + webinarId - The webinar's unique identifier.
    # + return - returns can be any of following types 
    # http:Created (**HTTP Status Code:** `200` **OK**   
    #
    # Registrants added.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # **Error Code:** `300` <br>
    # This API can only be used for scheduled webinars (type 5). Batch registration is not supported for other webinar types. <br>
    # **Error Code:** `3038` <br>
    # The webinar is over. You cannot register now. If you have any questions, contact the webinar's host. <br>
    # **Error Code:** `3000` <br>
    # You have reached the limit for the number of attendees you can add. Contact Zoom Support for more information. <br>
    # **Error Code:** `3000` <br>
    # The Zoom REST API does not support paid registration. <br>
    # **Error Code:** `3043` <br>
    # Webinar has reached maximum attendee capacity. <br>
    # **Error Code:** `3000` <br>
    # Registration has not been enabled for this webinar: {webinarId}. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function post webinars/[string webinarId]/batch_registrants(@http:Payload WebinarIdBatchRegistrantsBody payload) returns InlineResponse20115|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update a meeting poll
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + pollId - The poll ID
    # + payload - The meeting poll. 
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   
    #
    # Meeting Poll Updated)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `4400` <br>
    # * Meeting polls disabled. To enable this feature, enable the "Meeting Polls/Quizzes" setting in the Zoom web portal's "Settings" interface. 
    # * Advanced meeting polls disabled. To enable this feature, enable the "Allow host to create advanced polls and quizzes" setting in the Zoom web portal's "Settings" interface. <br>
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `404` <br>
    # Meeting Poll not found <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function put meetings/[int meetingId]/polls/[string pollId](@http:Payload PollspollIdBody payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update a registrant's status
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`  
    #
    # Registrant status updated.)
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function put meetings/[int meetingId]/recordings/registrants/status(@http:Payload RegistrantsStatusBody payload) returns http:NoContent|http:NotFound|http:TooManyRequests {
    }

    # Update registrant's status
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + occurrence_id - The meeting or webinar occurrence ID.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`  
    #
    # Registrant status updated.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account: {accountId}.<br>
    #
    # **Error Code:** `3000` <br>
    # Cannot access meeting information.<br>
    #
    # **Error Code:** `3003` <br>
    # You're not the meeting host.
    #
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `1001` <br>
    # User does not exist: {userId}.<br>
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function put meetings/[int meetingId]/registrants/status(string? occurrence_id, @http:Payload RegistrantsStatusBody1 payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update meeting status
    #
    # + meetingId - The meeting's ID. 
    # When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`  
    #
    # Meeting updated.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account: {accountId}.
    #
    # **Error Code:** `3000` <br>
    # Cannot access meeting info.
    #
    # **Error Code:** `3003` <br>
    # You're not the meeting host.
    #
    # **Error Code:** `3063` <br>
    # Can not end on-premise user's meeting: {meetingId}.
    #
    # **Error Code:** `3161` <br>
    # Meeting hosting and scheduling capabilities are not allowed for your user account.
    #
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found
    #
    # **Error Code:** `1001` <br>
    # Meeting host does not exist: {userId}.
    #
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function put meetings/[int meetingId]/status(@http:Payload MeetingIdStatusBody payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Recover a single recording
    #
    # + meetingId - To get a meeting's cloud recordings, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID, the response will be for the latest meeting instance. 
    # To get a webinar's cloud recordings, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID, the response will be for the latest webinar instance. 
    # If a UUID starts with `/` or contains `//`, like `/ajXp112QmuoKj4854875==`, you must **double encode** the UUID before making an API request. 
    # + recordingId - The recording ID.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`   
    # Meeting recording recovered.
    #
    # )
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account: {accountId}. <br>
    # **Error Code:** `3309` <br>
    # Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User {userId} does not exist or does not belong to this account.<br> <br>
    # **Error Code:** `3301` <br>
    # There is no recording for this meeting. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function put meetings/[string meetingId]/recordings/[string recordingId]/status(@http:Payload RecordingIdStatusBody payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Recover meeting recordings
    #
    # + meetingUUID - The meeting's universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.
    # If the meeting UUID begins with a `/` character or contains a `//` character, you **must** double-encode the meeting UUID when using the meeting UUID for other API calls.
    # + return - returns can be any of following types 
    # http:Ok (**HTTP Status Code:** `200`   
    #
    # Recordings recovered. 
    #
    # **Error Code:** `200`  
    #
    # You do not have the right permissions.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `1010` <br>
    # User does not belong to this account: {accountId}. <br>
    # **Error Code:** `3309` <br>
    # Not enough cloud storage available. Either purchase additional storage or delete cloud recordings to free up storage. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `1001` <br>
    # User does not exist: {userId}.<br> <br>
    # **Error Code:** `3301` <br>
    # There is no recording for this meeting. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function put meetings/[string meetingUUID]/recordings/status(@http:Payload RecordingsStatusBody payload) returns http:Ok|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update a webinar poll
    #
    # + webinarId - The webinar's ID.
    # + pollId - The poll ID.
    # + payload - The webinar poll. 
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204`  
    #
    # Webinar Poll Updated)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `4400` <br>
    # Webinar polls disabled. To enable this feature, enable the **Webinar Polls/Quizzes** setting in the Zoom web portal's **Settings** interface.  <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function put webinars/[int webinarId]/polls/[string pollId](@http:Payload PollspollIdBody1 payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update registrant's status
    #
    # + webinarId - The webinar's ID.
    # + occurrence_id - The meeting or webinar occurrence ID.
    # + return - returns can be any of following types 
    # http:NoContent (**HTTP Status Code:** `204` <br>
    # Registrant status updated.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `3035` <br>
    # Webinar has reached maximum attendee capacity. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # **Error Code:** `300` <br>
    # Registration has not been enabled for this meeting: {webinarId}. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function put webinars/[int webinarId]/registrants/status(string? occurrence_id, @http:Payload RegistrantsStatusBody2 payload) returns http:NoContent|http:BadRequest|http:NotFound|http:TooManyRequests {
    }

    # Update webinar status
    #
    # + webinarId - The webinar's ID.
    # + return - returns can be any of following types 
    # http:Ok (Webinar plan subscription is missing. Enable webinar for this user once the subscription is added: {userId}.)
    # http:BadRequest (**HTTP Status Code:** `400` <br>
    # Bad Request  
    #
    # **Error Code:** `3063` <br>
    # You can not end an on-premise user's meeting: {webinarId} using this API. <br>
    # **Error Code:** `300` <br>
    # Invalid webinar ID. <br>
    # **Error Code:** `200` <br>
    # No permission. <br>
    # **Error Code:** `200` <br>
    # Webinar plan is missing. You must subscribe to the webinar plan and enable webinars for this user in order to perform this action. <br>
    # )
    # http:NotFound (**HTTP Status Code:** `404` <br>
    # Not Found  
    #
    # **Error Code:** `3001` <br>
    # Webinar does not exist: {webinarId}. <br>
    # )
    # http:TooManyRequests (**HTTP Status Code:** `429` <br>
    # Too Many Requests. For more information, see [rate limits](https://developers.zoom.us/docs/api/rest/rate-limits/). 
    #
    # )
    resource function put webinars/[int webinarId]/status(@http:Payload WebinarIdStatusBody payload) returns http:Ok|http:BadRequest|http:NotFound|http:TooManyRequests {
    }
}
